{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation of the NorESM LandSites Platform This page describes what the platform contains, how the input data were made, the main functionalities, and model output. See the navigation panel on the left for our user guide , available sites , about us , and contribution guidelines and Code of Conduct . Advanced users may also be interested in the technical documentation of FATES and CLM . The main code is stored here in a GitHub repository . The main branch stores the latest functioning version. Older versions can be accessed under Releases . This documentation page is made with GitHub pages ( gh-pages branch) and Mkdocs . To contribute to the code or documentation, see our Contributing instructions. There you will also find our Code of Conduct . Advanced users who want to do development in addition to just running simulations can request resources on e.g. NREC . An early version of the platform is also available on Galaxy . Please let us know if you have suggestions or trouble using the platform by opening a new issue on GitHub. \ud83d\udea7 NB! This documentation is under construction and contains some outdated and/or missing parts. \ud83d\udea7 Platform content You can use the platform to run single-cell model simulations from a browser on your local computer. We provide sites with high quality input data (atmospheric forcing, land surface data, 'spin-up'), and provide Jupyter notebooks with example python code to plot some input data and model output. Illustration of the software architecture. Gray boxes are Docker containers. Model container is expanded to show the two services running in there (i.e. API and Tasks ) in addition to hosting the model and its dependencies. ./resources contains all the folders that are mounted into the containers by docker-compose . The model and the API manage the blue ones, and yellow folders are created by the code maintainers\u2014an asterisk indicates the folder is optional. After first-time installation and setup , users can access the Web User Interface (UI) and Jupyter server. The UI uses and Application Programming Interface (API) to send commands between the users and Docker containers. API An Application Programming Interface (API) is a set of tools that enables the end-users to interact with a program. The interaction happens by receiving some commands from the users, performing some actions if necessary, and then sending back some results. We created an HTTP API for the model using FastAPI, a popular high-performance framework for Python. It means the API can be used through any medium that can send and receive HTTP requests, e.g., browsers and libraries like python-requests. FastAPI generates a REST API based on OpenAPI specifications . It also automatically generates documentation for the API from the docstrings of the python functions, which includes a description of the inputs and outputs and examples. The documentation is interactive and can be accessed through its web-based user interface. The Platform API is responsible for: Getting a copy of the model code (via version control or by downloading the source code). Setting up the model's external components. Overwriting parts of the model with the specified code in resources/overwrites (optional). Defining the machine config, i.e., the Docker container, for the model (see resources/dotcime ). Creating, configuring, and running cases. Serving inputs and outputs of the created cases. The API code can be found at https://github.com/NorESMhub/ctsm-api . Docker containers and model dependencies CTSM and NorESM depend on many external libraries, which can be challenging to install on a personal computer. The difficulties can be due to a lack of cross-platform support, version conflict with existing libraries, or system architecture. One solution to this is containerization, which is the process of packaging and distributing software in a way that can be run on various platforms. Containers use Operating System-level virtualization. This allows efficient use of resources while isolating the software from other processes running on the host system. All the requirements for packaged software are included in the container. We used Docker for this purpose. Docker is a widely used and popular containerization tool. The packaged software is called an Image. When a Docker Image is run, it is called a Container, i.e., a running instance of the software. The main Image created for the Platform is ctsm-api . It contains all the dependencies for the model, the scripts to initialize and configure the model, and the API code that provides access to the model. The Image can be configured via an environment file ( .env ), which gives control to users to adjust some initial properties of the model and the Platform, e.g., what version of the model to use and what drivers should be enabled. In order to allow easier maintenance and better use of resources, some dependencies are not included in the Image. For example, the message queuing broker (RabbitMQ) required by the API, which is needed to manage asynchronous communications between the model and the API, is not included. This service can be added by using the official RabbitMQ Docker Image . Keeping this service out of the Image lets more savvy users pick a different message broker for their use cases. To address the needs of non-technical users, we have taken care of the extra configurations for the containers by using an orchestration tool called Docker Compose . Docker Compose is a wrapper around Docker, which allows configuring and organizing all the containers in a single YAML file. In addition to the previously mentioned Images, we have included an Image for Jupyter Server and one for our Web User Interface (UI) for ctsm-api . The reason for using a container is that the NorESM model code is not an app but rather a collection of code, and that code needs to be modified in order to run on a new machine. To make the model more like a downloadable app for any machine (e.g. your mac/windows/linux laptop/pc), we put the code in a Docker container that works as a mini-machine within your machine (laptop/pc). A Docker file is used to enable simulations on any machine, such as a laptop or an HPC cluster. When we release a new version, we have to build a container using this Docker file. Users can then download the dontainer and run simulations there. For details on the docker file and how to modify or update it, look to this description on GitHub Web User Interface Users can set up cases, change some model settings, and run simulations via the Web User Interface. Once the platform is correctly up and running, the UI will be available at localhost:8080 . The web UI is an application that represents some configurable parameters of the model in a user-friendly way. It comes with built-in validations and error handling for the acceptable values of the parameters. Its goal is to streamline the process of editing a case and help users focus on the scientific aspects of their simulations rather than on the technical configuration. The Web User Interface (UI) code can be found at https://github.com/NorESMhub/fates-platform . The UI is created using Typescript , a superset of JavaScript language, with the React framework. Jupyter Server The included Jupyter Server Image comes with some commonly used python libraries for data analysis. The list of bundled libraries is available at https://github.com/MetOs-UiO/fates_platform_ecological_climatology/blob/main/docker/jupyter/Dockerfile#L7. When the platform is up and running, the Jupyter server is available at localhost:8888 . Example and tutorial Jupyter notebooks are stored in /notebooks . Model versions The platform is built to run the land model (CLM) with the Norwegian Earth System Model (as opposed to e.g. CESM which also uses the same land model). The versions of FATES and CLM therefore have to be in line with stable NorESM versions. NorESM is taken in to the platform using the noresm_landsites branch in the NorESMhub/NorESM repository . Table 1: Model versions Model Version NorESM https://github.com/NorESMhub/NorESM/tree/release-nlp0.1.0 CLM ctsm5.1.dev038 FATES sci.1.43.2_api.14.2.0 Input data Running the model requires specifying compsets, atmospheric forcing, land surface parameters, and sometimes spin-up to get realistic simulations. The versioned input data are in a shared folder on sigma2.no . The .tar files are compressed and can be opened as a folder with e.g. 7-zip by right-clicking and choosing 'open archive', and used after extracting (unzipping). The data files are stored in .nc (NetCDF) format, which can be viewed using Panoply , or packages in Python or R . The output data from simulations are stored in the same format but in the specific case folder. Component sets (compsets) Short for component sets, compsets specify which component models are used as well as specific settings for forcing scenarios and physics options. NorESM consists of several sub-models (components) for the atmosphere, land, ocean, etc, plus some common infrastructure code that allows the components to pass information back and forth at certain time steps. Component sets have a short name and a longer name with abbreviations denoting the components included. See more in the CLM user guide . The compset is specified by combining components in this order: atm, lnd, ice, ocn, river, glc, and wave. Each component model version may be \"active,\" \"data,\" \"dead,\" or \"stub\". Stub components are used instead of active to save computation time and input requirements when that component is not needed for the model configuration. For instance, the active land component forced with atmospheric data, does not need ice, ocn, or glc components to be active and can replace them with stubs. TIME: Initialization Time, here for the year 2000 which gives present day conditions (as opposed to pre-industrial or future) of e.g. CO 2 ppm. ATM: Atmosphere, here DATM%1PTGSWP3 for data driven (D) atmosphere (ATM) component driven in a point (PT) by GSWP3 forcing data LND: Land, here CLM50%FATES/BGC/SP for active Community Land Model version 5.0 and one of the following vegetation modes: Functionally Assembled Terrestrial Ecosystem Simulator vegetation (FATES) FATES with BioGeoChemistry (BGC) FATES simplified mode with Satellite Phenology (SP) ICE: Sea-ice, here SICE stub ice OCN: Ocean, here SOCN stub ocean ROF: River runoff, here MOSART the MOdel for Scale Adaptive River Transport GLC: Land Ice, here SGLC stub glacier (land ice) component WAV: Wave, here SWAV stub wave component The compset longname defines it in the code with the following notation: TIME_ATM[%phys]\\_LND[%phys]\\_ICE[%phys]\\_OCN[%phys]\\_ROF[%phys]\\_GLC[%phys]\\_WAV[%phys] . Currently, we only support the following compset using FATES: 2000_DATM%1PTGSWP3_CLM50%FATES_SICE_SOCN_MOSART_SGLC_SWAV More compsets for pre-industrial or future simulations require additional input data and may be included in future versions of the platform. For now, if you need other compsets you need to dig deeper into the CLM technical documentation and provide the necessary input data and code changes yourself. Atmospheric forcing Atmospheric forcing data drives the modelled climate using a time series of climatic variables. Downloadable data products exist, but is often on too coarse scales for realistic single-point simulations. Here is a list of atmospheric forcing variables used in CLM: Incident solar radiation (FSDS), W/m2 Temperature at the lowest atmospheric level (TBOT), degrees K (or can be C) Precipitation (PRECTmms), mm/s Wind speed at the lowest atmospheric level (WIND), m/s Forcing data for our sites are stored with the rest of the input data . Here are some exaples of what the input data .tar contains: CAM/chem/trop_mozart_aero/aero/ aerosol deposition: dust, black carbon, organic carbon datm7 GSWP3v1: monthly atmospheric forcing from the GSWP3 data product. The climatic variables in the above list are stored in these files. NASA_LIS: lightning frequency topo_forcing: topography height If you have your own data, you can replace the default input files with your own. under construction: Instruction for how to do this . Make sure the format and units are the exact same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation Surface data Surface data contains information the model needs about the land surface, such as land use trajectories, soil properties, vegetation parameters, and albedo . Here are some exaples of what the input data .tar contains: 'firedata' population density 'paramdata' CLM5 parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allocation of carbon, photosynthetic pathway FATES parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allometry, carbon pools, nitrogen uptake, mortality, recruitment, fuel load for fire module 'snicardata' snow \"growth\" parameters snow \"optics\" 'surfdata_map' surface data: soil depth & other properties, albedo & thermal conductance of different surface types, and fraction of gridcell covered by vegetation, land, & other land cover types 'urbandata' urban classes, building interior temperature Note that when CLM is running without FATES, a simpler 'big-leaf'-version of vegetation is used instead. The CLM5 and FATES parameters thus overlap to some degree, with FATES replacing some and adding other parameters when activated. For the Vestland climate grid sites , surface data has been created from raw data sets, using this script . There are publicly available data products that could be downloaded and extracted for the nearest model gridcell, given points coordinates, that contain all the necessary surface data. We have not used this; our surface data is interpolated from raw data sets of better resolution. This data should be more accurate than the alternative data products. If you have your own data, you can replace the default input files with your own. under construction: Instruction for how to do this . Make sure the format and units are the same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation Spin-up To get realistic simulations, the model needs to run for a while to reach a state of equilibrium under the applied forcing. Starting the model from \"bare ground\" (= run type startup), the model needs time to grow and kill vegetation to get appropriate soil properties, Plant Functional Type distribution, and a stable climate. Model parameters and sites configuration To be able to set model parameters in the web UI, some configuration files are needed. Both model parameters and sites configurations are provided by the maintainers as JSON files in resources/config/variables_config.json and resources/config/sites.json . They can be modified by users who are familiar with the model. The model parameters file contains a list of JSON objects. Attributes of each object are described in table [TODO: X2]. Note that not all types of variables accepted by the model are supported in the user interface at this point. The tables below describe how these configuration files work and handle the model settings users can change in the UI. Table 2: Model parameter attributes, compare to the variables_config.json file in /resources/config Attribute Type default Required Scope Description name string - yes Model Name of the variable exactly as it should be passed to the model. label string - no UI A human-readable label describing the parameter. category string - yes API One of the following: ctsm_xml , user_nl_clm , user_nl_clm_history_file , fates , fates_param . type string - yes Model, API One of the following: char , integer , float , logical , date . description string - no UI Detailed description of the parameter. readonly boolean false no UI Whether the parameter can be edited by the user. hidden boolean false no UI Whether the parameter should be hidden from the user. allow_multiple boolean false no API, UI Whether the parameter accepts multiple values. allow_custom boolean false no UI Whether users can enter values other than the ones provided as choices (only applies to those parameters with choices in their validation attribute. validation Validation object - no API, UI See Validation table below ([TODO: X3]). default integer, float, string, boolean - no API A default value to use. It must match the type specified by the type attribute. If allow_multiple is set to true , it must be a list of values. placeholder string - no UI A placeholder value to show to the user. This value is not actually applied if no value is entered by the user. append_input_path boolean false no API Whether to adjust a path value based on its relative location in the input folder. Adjusted values can be validated using the validation attribute. Currently, only the validators described in table 3 are supported. Table 3: validation attributes to define which values are accepted for each model parameter Attribute Type Description min float A minimum value for numeric attributes. max float A maximum value for numeric attributes. pattern string A regular expression to match the value against. pattern_error string A custom error message for values not matching the pattern attribute. choices [integer, float, string, boolean] A list of choices for users to select from. Sites in resources/config/sites.json are described as GeoJSON points . The site map in the web UI draws on these site definitions. Their configuration is set in the properties attribute of the GeoJSON object, as described in table 4. Table 4: Site geoJSON properties, compare with the sites.json file in /resources/config Attribute Type Required Description name string yes Name of the site. compset string yes The component set to use with the model. res string yes The resolution/grid to use with the model. config [Config object] no Config is an object with two keys: name and value . The former must point to a parameter in resources/config/variables_config.json . The latter must be a valid value for that parameters. These are used as default values for the given parameter for the site. Running simulations in the web User Interface See the user guide for instructions on running simulations. Advanced users who want to change additional or different model parameters or settings can do so manually Create case To run a simulation, you need to set up a case which tells the model how to run. A case can be run several times, or stopped and started again. For more detailed information on what goes on in CLM and its coupler (which connects CLM to other model components), see this CIME user guide , but note that the NorESM modelling platform uses these commands and scripts more indirectly. In the web UI, once you have chosen a site you get options to download site data (optional) and to create a new case. When you create a new case, you can change some model parameters as defined in the variables_config.json file described above. There are more customisation options for the models that advanced users can change manually, but for simplicity and explainability we have restricted the options in the UI and grouped them like this: Run environment CLM namelist History Files FATES Run environment settings parameter values explanation CALENDAR No Leap, Gregorian Should the simulation follow the Gregorian (realistic) or simplified calendar without leap years? This option should normally follow the calendar the input data is provided in. DATM_CLMCEP_YR_START RUN_TYPE startup, hybrid, branch, restart startup : a 'cold' start from bare ground. The vegetation and climate is not in equilibrium and the model will not produce realistic output. No spin-up included. Use this mode for quick testing, or for making your own spin-up. hybrid : the model is initialized similar to a startup run, but uses initialization datasets from a previous case. Suitable when you already have good spin-up files and want a more realistic simulation. branch : the model is initialized using a consistent set of restart files from a previous run. The case name is generally changed for a branch run, although it does not have to be. Branch runs are suitable for sensitivity or parameter studies, or when settings for history file output streams need to be modified while still maintaining bit-for-bit reproducibility. restart : continues running an existing case after it has been stopped. CLM namelist simulation settings parameter values explanation History Files By default, the model records output in one tape (hist_fincl1) as one (hist_mfilt=1) average (hist_avgflag_pertape=A) monthly (hist_nhtfrq=0) value, for a subset of variables (Active=T in this list , in a long-lat grid (hist_dov2xy=TRUE). If you want output to be recorded for additional variables or at different time steps, you can modify the first column or fill in additional columns. Each column corresponds to a history tape, that is a series of files created for the simulation period. If you want to run the model without saving any output, set hist_mfilt=0 in the first column. By modifying additional columns, you can add tapes (series of files) with with e.g. different output variables recorded at its maximum value per day and in a long string instead of in the default lat-lon grid (some vegetation demographic output is only accessible in that format). parameter values explanation FATES simulation settings Users can remove or modify Plant Functional Types by checking/unchecking PFTs and typing in custom values for a subset of parameters. The full list of parameters is in the FATES model code . parameter values explanation Running and editing simulations Once a case had been created and is ready, you can look at the model settings is can be run and copied/edited using the Edit button. Postprocess output files Output is stored in .nc (NetCDF) format, which can be viewed using Panoply, or packages in Python or R . From the UI, when a case has finished successfully you can download the output or simply open the Jupyter server (at localhost:8888) and work with the output there, using e.g. the provided notebook in the tutorials folder. Versions Platform versions follow standard numbering, and releases below 1 should be considered unstable and preliminary. List of versions (newest on top): release ... tag 0.1.0-dev","title":"Home"},{"location":"#welcome-to-the-documentation-of-the-noresm-landsites-platform","text":"This page describes what the platform contains, how the input data were made, the main functionalities, and model output. See the navigation panel on the left for our user guide , available sites , about us , and contribution guidelines and Code of Conduct . Advanced users may also be interested in the technical documentation of FATES and CLM . The main code is stored here in a GitHub repository . The main branch stores the latest functioning version. Older versions can be accessed under Releases . This documentation page is made with GitHub pages ( gh-pages branch) and Mkdocs . To contribute to the code or documentation, see our Contributing instructions. There you will also find our Code of Conduct . Advanced users who want to do development in addition to just running simulations can request resources on e.g. NREC . An early version of the platform is also available on Galaxy . Please let us know if you have suggestions or trouble using the platform by opening a new issue on GitHub. \ud83d\udea7 NB! This documentation is under construction and contains some outdated and/or missing parts. \ud83d\udea7","title":"Welcome to the documentation of the NorESM LandSites Platform"},{"location":"#platform-content","text":"You can use the platform to run single-cell model simulations from a browser on your local computer. We provide sites with high quality input data (atmospheric forcing, land surface data, 'spin-up'), and provide Jupyter notebooks with example python code to plot some input data and model output. Illustration of the software architecture. Gray boxes are Docker containers. Model container is expanded to show the two services running in there (i.e. API and Tasks ) in addition to hosting the model and its dependencies. ./resources contains all the folders that are mounted into the containers by docker-compose . The model and the API manage the blue ones, and yellow folders are created by the code maintainers\u2014an asterisk indicates the folder is optional. After first-time installation and setup , users can access the Web User Interface (UI) and Jupyter server. The UI uses and Application Programming Interface (API) to send commands between the users and Docker containers.","title":"Platform content"},{"location":"#api","text":"An Application Programming Interface (API) is a set of tools that enables the end-users to interact with a program. The interaction happens by receiving some commands from the users, performing some actions if necessary, and then sending back some results. We created an HTTP API for the model using FastAPI, a popular high-performance framework for Python. It means the API can be used through any medium that can send and receive HTTP requests, e.g., browsers and libraries like python-requests. FastAPI generates a REST API based on OpenAPI specifications . It also automatically generates documentation for the API from the docstrings of the python functions, which includes a description of the inputs and outputs and examples. The documentation is interactive and can be accessed through its web-based user interface. The Platform API is responsible for: Getting a copy of the model code (via version control or by downloading the source code). Setting up the model's external components. Overwriting parts of the model with the specified code in resources/overwrites (optional). Defining the machine config, i.e., the Docker container, for the model (see resources/dotcime ). Creating, configuring, and running cases. Serving inputs and outputs of the created cases. The API code can be found at https://github.com/NorESMhub/ctsm-api .","title":"API"},{"location":"#docker-containers-and-model-dependencies","text":"CTSM and NorESM depend on many external libraries, which can be challenging to install on a personal computer. The difficulties can be due to a lack of cross-platform support, version conflict with existing libraries, or system architecture. One solution to this is containerization, which is the process of packaging and distributing software in a way that can be run on various platforms. Containers use Operating System-level virtualization. This allows efficient use of resources while isolating the software from other processes running on the host system. All the requirements for packaged software are included in the container. We used Docker for this purpose. Docker is a widely used and popular containerization tool. The packaged software is called an Image. When a Docker Image is run, it is called a Container, i.e., a running instance of the software. The main Image created for the Platform is ctsm-api . It contains all the dependencies for the model, the scripts to initialize and configure the model, and the API code that provides access to the model. The Image can be configured via an environment file ( .env ), which gives control to users to adjust some initial properties of the model and the Platform, e.g., what version of the model to use and what drivers should be enabled. In order to allow easier maintenance and better use of resources, some dependencies are not included in the Image. For example, the message queuing broker (RabbitMQ) required by the API, which is needed to manage asynchronous communications between the model and the API, is not included. This service can be added by using the official RabbitMQ Docker Image . Keeping this service out of the Image lets more savvy users pick a different message broker for their use cases. To address the needs of non-technical users, we have taken care of the extra configurations for the containers by using an orchestration tool called Docker Compose . Docker Compose is a wrapper around Docker, which allows configuring and organizing all the containers in a single YAML file. In addition to the previously mentioned Images, we have included an Image for Jupyter Server and one for our Web User Interface (UI) for ctsm-api . The reason for using a container is that the NorESM model code is not an app but rather a collection of code, and that code needs to be modified in order to run on a new machine. To make the model more like a downloadable app for any machine (e.g. your mac/windows/linux laptop/pc), we put the code in a Docker container that works as a mini-machine within your machine (laptop/pc). A Docker file is used to enable simulations on any machine, such as a laptop or an HPC cluster. When we release a new version, we have to build a container using this Docker file. Users can then download the dontainer and run simulations there. For details on the docker file and how to modify or update it, look to this description on GitHub","title":"Docker containers and model dependencies"},{"location":"#web-user-interface","text":"Users can set up cases, change some model settings, and run simulations via the Web User Interface. Once the platform is correctly up and running, the UI will be available at localhost:8080 . The web UI is an application that represents some configurable parameters of the model in a user-friendly way. It comes with built-in validations and error handling for the acceptable values of the parameters. Its goal is to streamline the process of editing a case and help users focus on the scientific aspects of their simulations rather than on the technical configuration. The Web User Interface (UI) code can be found at https://github.com/NorESMhub/fates-platform . The UI is created using Typescript , a superset of JavaScript language, with the React framework.","title":"Web User Interface"},{"location":"#jupyter-server","text":"The included Jupyter Server Image comes with some commonly used python libraries for data analysis. The list of bundled libraries is available at https://github.com/MetOs-UiO/fates_platform_ecological_climatology/blob/main/docker/jupyter/Dockerfile#L7. When the platform is up and running, the Jupyter server is available at localhost:8888 . Example and tutorial Jupyter notebooks are stored in /notebooks .","title":"Jupyter Server"},{"location":"#model-versions","text":"The platform is built to run the land model (CLM) with the Norwegian Earth System Model (as opposed to e.g. CESM which also uses the same land model). The versions of FATES and CLM therefore have to be in line with stable NorESM versions. NorESM is taken in to the platform using the noresm_landsites branch in the NorESMhub/NorESM repository . Table 1: Model versions Model Version NorESM https://github.com/NorESMhub/NorESM/tree/release-nlp0.1.0 CLM ctsm5.1.dev038 FATES sci.1.43.2_api.14.2.0","title":"Model versions"},{"location":"#input-data","text":"Running the model requires specifying compsets, atmospheric forcing, land surface parameters, and sometimes spin-up to get realistic simulations. The versioned input data are in a shared folder on sigma2.no . The .tar files are compressed and can be opened as a folder with e.g. 7-zip by right-clicking and choosing 'open archive', and used after extracting (unzipping). The data files are stored in .nc (NetCDF) format, which can be viewed using Panoply , or packages in Python or R . The output data from simulations are stored in the same format but in the specific case folder.","title":"Input data"},{"location":"#component-sets-compsets","text":"Short for component sets, compsets specify which component models are used as well as specific settings for forcing scenarios and physics options. NorESM consists of several sub-models (components) for the atmosphere, land, ocean, etc, plus some common infrastructure code that allows the components to pass information back and forth at certain time steps. Component sets have a short name and a longer name with abbreviations denoting the components included. See more in the CLM user guide . The compset is specified by combining components in this order: atm, lnd, ice, ocn, river, glc, and wave. Each component model version may be \"active,\" \"data,\" \"dead,\" or \"stub\". Stub components are used instead of active to save computation time and input requirements when that component is not needed for the model configuration. For instance, the active land component forced with atmospheric data, does not need ice, ocn, or glc components to be active and can replace them with stubs. TIME: Initialization Time, here for the year 2000 which gives present day conditions (as opposed to pre-industrial or future) of e.g. CO 2 ppm. ATM: Atmosphere, here DATM%1PTGSWP3 for data driven (D) atmosphere (ATM) component driven in a point (PT) by GSWP3 forcing data LND: Land, here CLM50%FATES/BGC/SP for active Community Land Model version 5.0 and one of the following vegetation modes: Functionally Assembled Terrestrial Ecosystem Simulator vegetation (FATES) FATES with BioGeoChemistry (BGC) FATES simplified mode with Satellite Phenology (SP) ICE: Sea-ice, here SICE stub ice OCN: Ocean, here SOCN stub ocean ROF: River runoff, here MOSART the MOdel for Scale Adaptive River Transport GLC: Land Ice, here SGLC stub glacier (land ice) component WAV: Wave, here SWAV stub wave component The compset longname defines it in the code with the following notation: TIME_ATM[%phys]\\_LND[%phys]\\_ICE[%phys]\\_OCN[%phys]\\_ROF[%phys]\\_GLC[%phys]\\_WAV[%phys] . Currently, we only support the following compset using FATES: 2000_DATM%1PTGSWP3_CLM50%FATES_SICE_SOCN_MOSART_SGLC_SWAV More compsets for pre-industrial or future simulations require additional input data and may be included in future versions of the platform. For now, if you need other compsets you need to dig deeper into the CLM technical documentation and provide the necessary input data and code changes yourself.","title":"Component sets (compsets)"},{"location":"#atmospheric-forcing","text":"Atmospheric forcing data drives the modelled climate using a time series of climatic variables. Downloadable data products exist, but is often on too coarse scales for realistic single-point simulations. Here is a list of atmospheric forcing variables used in CLM: Incident solar radiation (FSDS), W/m2 Temperature at the lowest atmospheric level (TBOT), degrees K (or can be C) Precipitation (PRECTmms), mm/s Wind speed at the lowest atmospheric level (WIND), m/s Forcing data for our sites are stored with the rest of the input data . Here are some exaples of what the input data .tar contains: CAM/chem/trop_mozart_aero/aero/ aerosol deposition: dust, black carbon, organic carbon datm7 GSWP3v1: monthly atmospheric forcing from the GSWP3 data product. The climatic variables in the above list are stored in these files. NASA_LIS: lightning frequency topo_forcing: topography height If you have your own data, you can replace the default input files with your own. under construction: Instruction for how to do this . Make sure the format and units are the exact same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation","title":"Atmospheric forcing"},{"location":"#surface-data","text":"Surface data contains information the model needs about the land surface, such as land use trajectories, soil properties, vegetation parameters, and albedo . Here are some exaples of what the input data .tar contains: 'firedata' population density 'paramdata' CLM5 parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allocation of carbon, photosynthetic pathway FATES parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allometry, carbon pools, nitrogen uptake, mortality, recruitment, fuel load for fire module 'snicardata' snow \"growth\" parameters snow \"optics\" 'surfdata_map' surface data: soil depth & other properties, albedo & thermal conductance of different surface types, and fraction of gridcell covered by vegetation, land, & other land cover types 'urbandata' urban classes, building interior temperature Note that when CLM is running without FATES, a simpler 'big-leaf'-version of vegetation is used instead. The CLM5 and FATES parameters thus overlap to some degree, with FATES replacing some and adding other parameters when activated. For the Vestland climate grid sites , surface data has been created from raw data sets, using this script . There are publicly available data products that could be downloaded and extracted for the nearest model gridcell, given points coordinates, that contain all the necessary surface data. We have not used this; our surface data is interpolated from raw data sets of better resolution. This data should be more accurate than the alternative data products. If you have your own data, you can replace the default input files with your own. under construction: Instruction for how to do this . Make sure the format and units are the same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation","title":"Surface data"},{"location":"#spin-up","text":"To get realistic simulations, the model needs to run for a while to reach a state of equilibrium under the applied forcing. Starting the model from \"bare ground\" (= run type startup), the model needs time to grow and kill vegetation to get appropriate soil properties, Plant Functional Type distribution, and a stable climate.","title":"Spin-up"},{"location":"#model-parameters-and-sites-configuration","text":"To be able to set model parameters in the web UI, some configuration files are needed. Both model parameters and sites configurations are provided by the maintainers as JSON files in resources/config/variables_config.json and resources/config/sites.json . They can be modified by users who are familiar with the model. The model parameters file contains a list of JSON objects. Attributes of each object are described in table [TODO: X2]. Note that not all types of variables accepted by the model are supported in the user interface at this point. The tables below describe how these configuration files work and handle the model settings users can change in the UI. Table 2: Model parameter attributes, compare to the variables_config.json file in /resources/config Attribute Type default Required Scope Description name string - yes Model Name of the variable exactly as it should be passed to the model. label string - no UI A human-readable label describing the parameter. category string - yes API One of the following: ctsm_xml , user_nl_clm , user_nl_clm_history_file , fates , fates_param . type string - yes Model, API One of the following: char , integer , float , logical , date . description string - no UI Detailed description of the parameter. readonly boolean false no UI Whether the parameter can be edited by the user. hidden boolean false no UI Whether the parameter should be hidden from the user. allow_multiple boolean false no API, UI Whether the parameter accepts multiple values. allow_custom boolean false no UI Whether users can enter values other than the ones provided as choices (only applies to those parameters with choices in their validation attribute. validation Validation object - no API, UI See Validation table below ([TODO: X3]). default integer, float, string, boolean - no API A default value to use. It must match the type specified by the type attribute. If allow_multiple is set to true , it must be a list of values. placeholder string - no UI A placeholder value to show to the user. This value is not actually applied if no value is entered by the user. append_input_path boolean false no API Whether to adjust a path value based on its relative location in the input folder. Adjusted values can be validated using the validation attribute. Currently, only the validators described in table 3 are supported. Table 3: validation attributes to define which values are accepted for each model parameter Attribute Type Description min float A minimum value for numeric attributes. max float A maximum value for numeric attributes. pattern string A regular expression to match the value against. pattern_error string A custom error message for values not matching the pattern attribute. choices [integer, float, string, boolean] A list of choices for users to select from. Sites in resources/config/sites.json are described as GeoJSON points . The site map in the web UI draws on these site definitions. Their configuration is set in the properties attribute of the GeoJSON object, as described in table 4. Table 4: Site geoJSON properties, compare with the sites.json file in /resources/config Attribute Type Required Description name string yes Name of the site. compset string yes The component set to use with the model. res string yes The resolution/grid to use with the model. config [Config object] no Config is an object with two keys: name and value . The former must point to a parameter in resources/config/variables_config.json . The latter must be a valid value for that parameters. These are used as default values for the given parameter for the site.","title":"Model parameters and sites configuration"},{"location":"#running-simulations-in-the-web-user-interface","text":"See the user guide for instructions on running simulations. Advanced users who want to change additional or different model parameters or settings can do so manually","title":"Running simulations in the web User Interface"},{"location":"#create-case","text":"To run a simulation, you need to set up a case which tells the model how to run. A case can be run several times, or stopped and started again. For more detailed information on what goes on in CLM and its coupler (which connects CLM to other model components), see this CIME user guide , but note that the NorESM modelling platform uses these commands and scripts more indirectly. In the web UI, once you have chosen a site you get options to download site data (optional) and to create a new case. When you create a new case, you can change some model parameters as defined in the variables_config.json file described above. There are more customisation options for the models that advanced users can change manually, but for simplicity and explainability we have restricted the options in the UI and grouped them like this: Run environment CLM namelist History Files FATES","title":"Create case"},{"location":"#run-environment-settings","text":"parameter values explanation CALENDAR No Leap, Gregorian Should the simulation follow the Gregorian (realistic) or simplified calendar without leap years? This option should normally follow the calendar the input data is provided in. DATM_CLMCEP_YR_START RUN_TYPE startup, hybrid, branch, restart startup : a 'cold' start from bare ground. The vegetation and climate is not in equilibrium and the model will not produce realistic output. No spin-up included. Use this mode for quick testing, or for making your own spin-up. hybrid : the model is initialized similar to a startup run, but uses initialization datasets from a previous case. Suitable when you already have good spin-up files and want a more realistic simulation. branch : the model is initialized using a consistent set of restart files from a previous run. The case name is generally changed for a branch run, although it does not have to be. Branch runs are suitable for sensitivity or parameter studies, or when settings for history file output streams need to be modified while still maintaining bit-for-bit reproducibility. restart : continues running an existing case after it has been stopped.","title":"Run environment settings"},{"location":"#clm-namelist-simulation-settings","text":"parameter values explanation","title":"CLM namelist simulation settings"},{"location":"#history-files","text":"By default, the model records output in one tape (hist_fincl1) as one (hist_mfilt=1) average (hist_avgflag_pertape=A) monthly (hist_nhtfrq=0) value, for a subset of variables (Active=T in this list , in a long-lat grid (hist_dov2xy=TRUE). If you want output to be recorded for additional variables or at different time steps, you can modify the first column or fill in additional columns. Each column corresponds to a history tape, that is a series of files created for the simulation period. If you want to run the model without saving any output, set hist_mfilt=0 in the first column. By modifying additional columns, you can add tapes (series of files) with with e.g. different output variables recorded at its maximum value per day and in a long string instead of in the default lat-lon grid (some vegetation demographic output is only accessible in that format). parameter values explanation","title":"History Files"},{"location":"#fates-simulation-settings","text":"Users can remove or modify Plant Functional Types by checking/unchecking PFTs and typing in custom values for a subset of parameters. The full list of parameters is in the FATES model code . parameter values explanation","title":"FATES simulation settings"},{"location":"#running-and-editing-simulations","text":"Once a case had been created and is ready, you can look at the model settings is can be run and copied/edited using the Edit button.","title":"Running and editing simulations"},{"location":"#postprocess","text":"","title":"Postprocess"},{"location":"#output-files","text":"Output is stored in .nc (NetCDF) format, which can be viewed using Panoply, or packages in Python or R . From the UI, when a case has finished successfully you can download the output or simply open the Jupyter server (at localhost:8888) and work with the output there, using e.g. the provided notebook in the tutorials folder.","title":"output files"},{"location":"#versions","text":"Platform versions follow standard numbering, and releases below 1 should be considered unstable and preliminary.","title":"Versions"},{"location":"#list-of-versions-newest-on-top","text":"release ... tag 0.1.0-dev","title":"List of versions (newest on top):"},{"location":"about/","text":"Platform for NorESM site-level simulation over land doi: under construction Overview and documentation The platform aims to facilitate site-level simulations over land using NorESM and its land component CTSM with the developing vegetation demographic module FATES . It provides optimized model setup, input data and reproducible workflows for running the model and analyzing model output over sites with meteorological, ecological and hydrological observations with minimal techincal obstacles. The platform aims to bridge the gaps between observations and modelling, and promote the usage of site-level observations to test, validate and improve NorESM and its land component on the one hand, and promote the usage of NorESM and its land model component by non-modellers on the other hand. The observation sites currently included in the platform are described in the Land sites section. Code development team Kaveh Karimi Hui Tang Lasse Torben Keetz Stefanie Falk Emiliano Gelati Elin Aas Anne Fouilloux Yeliz Yilmaz Eva Lieungh Peter Horvath Kjetil Aas Sunniva Indrehus Devaraju Narayanappa Data contributors Sonya Geange Inge Althuizen Supporting projects EMERALD LATICE SeedClim LandPress THREE-D INES EOSC-Nordic How to cite Acknowledgement Contact For questions about the platform, please open an issue on GitHub or get in touch with one of the code developers directly.","title":"About"},{"location":"about/#platform-for-noresm-site-level-simulation-over-land","text":"doi: under construction","title":"Platform for NorESM site-level simulation over land"},{"location":"about/#overview-and-documentation","text":"The platform aims to facilitate site-level simulations over land using NorESM and its land component CTSM with the developing vegetation demographic module FATES . It provides optimized model setup, input data and reproducible workflows for running the model and analyzing model output over sites with meteorological, ecological and hydrological observations with minimal techincal obstacles. The platform aims to bridge the gaps between observations and modelling, and promote the usage of site-level observations to test, validate and improve NorESM and its land component on the one hand, and promote the usage of NorESM and its land model component by non-modellers on the other hand. The observation sites currently included in the platform are described in the Land sites section.","title":"Overview and documentation"},{"location":"about/#code-development-team","text":"Kaveh Karimi Hui Tang Lasse Torben Keetz Stefanie Falk Emiliano Gelati Elin Aas Anne Fouilloux Yeliz Yilmaz Eva Lieungh Peter Horvath Kjetil Aas Sunniva Indrehus Devaraju Narayanappa","title":"Code development team"},{"location":"about/#data-contributors","text":"Sonya Geange Inge Althuizen","title":"Data contributors"},{"location":"about/#supporting-projects","text":"EMERALD LATICE SeedClim LandPress THREE-D INES EOSC-Nordic","title":"Supporting projects"},{"location":"about/#how-to-cite","text":"","title":"How to cite"},{"location":"about/#acknowledgement","text":"","title":"Acknowledgement"},{"location":"about/#contact","text":"For questions about the platform, please open an issue on GitHub or get in touch with one of the code developers directly.","title":"Contact"},{"location":"contributing/","text":"How to contribute to the NorESM land sites platform The NorESM land sites platform is developed by a group of students, postdocs, and software engineers when we have the time or need certain functionalities. We welcome anyone to join us in developing new functionalities, using the platform, add to the documentation, and contribute to making this platform a dynamic and useful research and teaching tool. If you have questions, comments, or suggestions for improvements, please open an issue in the repository. Any contributions and involvement in our community must be in line with our Code of conduct . How to contribute to the code We use our GitHub repository for developing code. If you are new to working with Git and GitHub, you might like this or this tutorial. The current version of the platform is kept in the main branch of the repository. Out first release tag of a functioning version (without GUI and API) is stored in the archive branch. Further development happens on indivudual forks and the develop branch and are merged into main with a pull request when the changes are functioning and tested. If you are developing code, please fork the repository and make your changes there before creating a pull request to the develop branch (or to main if you are confident the changes are complete and don't break anything). If your work touches the Docker container, see instructions in this readme file . If you have questions or comments about the platform, please open an issue issue in the repository. How to contribute to the documentation This documentation page is built using GitHub pages and MkDocs . To update it, change markdown files in /docs and commit the changes (or open a pull request). When the changes are saved, the page must be built again to fetch the changes. This is done automatically when changes are pushed/committed to main by a github Action. Alternatively, you can build the pages by using the mkdocs gh-deploy command in the top folder of the repository where mkdocs.yml tells github pages how to build the markdown files into a static webpage. See the Mkdocs docs for further info. Code of conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Scientific Use and Publication Ethics We aim to create an open development environment where scientists can be confident that all members of the community are conducting research in an ethical manner. In particular, writing scientific code is a form of intellectual contribution, and one should expect that all such intellectual contributions are respected and given credit in any resulting published scientific work. To support the community and avoid issues of scientific misconduct related to the above principle, please respect the following rules: Document the version of the platform and models used in any publication, preferably by using a release tag (existing or newly created) if possible, or a commit hash if not. Do not use code without checking the license or discussing with the author(s) your intentions for using the code and receiving their permission to do so. When using model features that have recently been integrated into this or the central NorESM/CLM/FATES development repositories, be mindful of the contributions of others and, where the novel features qualitatively affect the results of a given simulation, involve the author(s) of these features in any resulting manuscripts. Be particularly aware of the concerns of early career researchers, and ensure they have sufficient opportunities to lead publications using their developments. When discussing results arising from older model features that have been described in the literature, accurately cite the publications describing those features or releases. Enforcement Responsibilities Community leaders should clarify and enforce our standards of acceptable behavior and take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Enforcement All community leaders are obligated to respect the privacy and security of the reporter of any incident. Consequences for any action deemed to violate this Code of Conduct, enforced by community leaders, may be: Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 2.1 , and the FATES Code of Conduct .","title":"Contributing & code of conduct"},{"location":"contributing/#how-to-contribute-to-the-noresm-land-sites-platform","text":"The NorESM land sites platform is developed by a group of students, postdocs, and software engineers when we have the time or need certain functionalities. We welcome anyone to join us in developing new functionalities, using the platform, add to the documentation, and contribute to making this platform a dynamic and useful research and teaching tool. If you have questions, comments, or suggestions for improvements, please open an issue in the repository. Any contributions and involvement in our community must be in line with our Code of conduct .","title":"How to contribute to the NorESM land sites platform"},{"location":"contributing/#how-to-contribute-to-the-code","text":"We use our GitHub repository for developing code. If you are new to working with Git and GitHub, you might like this or this tutorial. The current version of the platform is kept in the main branch of the repository. Out first release tag of a functioning version (without GUI and API) is stored in the archive branch. Further development happens on indivudual forks and the develop branch and are merged into main with a pull request when the changes are functioning and tested. If you are developing code, please fork the repository and make your changes there before creating a pull request to the develop branch (or to main if you are confident the changes are complete and don't break anything). If your work touches the Docker container, see instructions in this readme file . If you have questions or comments about the platform, please open an issue issue in the repository.","title":"How to contribute to the code"},{"location":"contributing/#how-to-contribute-to-the-documentation","text":"This documentation page is built using GitHub pages and MkDocs . To update it, change markdown files in /docs and commit the changes (or open a pull request). When the changes are saved, the page must be built again to fetch the changes. This is done automatically when changes are pushed/committed to main by a github Action. Alternatively, you can build the pages by using the mkdocs gh-deploy command in the top folder of the repository where mkdocs.yml tells github pages how to build the markdown files into a static webpage. See the Mkdocs docs for further info.","title":"How to contribute to the documentation"},{"location":"contributing/#code-of-conduct","text":"","title":"Code of conduct"},{"location":"contributing/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"contributing/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"contributing/#scientific-use-and-publication-ethics","text":"We aim to create an open development environment where scientists can be confident that all members of the community are conducting research in an ethical manner. In particular, writing scientific code is a form of intellectual contribution, and one should expect that all such intellectual contributions are respected and given credit in any resulting published scientific work. To support the community and avoid issues of scientific misconduct related to the above principle, please respect the following rules: Document the version of the platform and models used in any publication, preferably by using a release tag (existing or newly created) if possible, or a commit hash if not. Do not use code without checking the license or discussing with the author(s) your intentions for using the code and receiving their permission to do so. When using model features that have recently been integrated into this or the central NorESM/CLM/FATES development repositories, be mindful of the contributions of others and, where the novel features qualitatively affect the results of a given simulation, involve the author(s) of these features in any resulting manuscripts. Be particularly aware of the concerns of early career researchers, and ensure they have sufficient opportunities to lead publications using their developments. When discussing results arising from older model features that have been described in the literature, accurately cite the publications describing those features or releases.","title":"Scientific Use and Publication Ethics"},{"location":"contributing/#enforcement-responsibilities","text":"Community leaders should clarify and enforce our standards of acceptable behavior and take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"contributing/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces.","title":"Scope"},{"location":"contributing/#enforcement","text":"All community leaders are obligated to respect the privacy and security of the reporter of any incident. Consequences for any action deemed to violate this Code of Conduct, enforced by community leaders, may be: Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community.","title":"Enforcement"},{"location":"contributing/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant, version 2.1 , and the FATES Code of Conduct .","title":"Attribution"},{"location":"land-sites/","text":"NorESM land sites We currently support 18 sites: 6 climate station sites of interest to the LATICE group and 12 Vestland climate grid sites. These locations are established study sites with climatic, and/or ecological data available. It is possible to add custom-made sites for somewhat experienced users. To plot site locations over a background map in R, you can also look at this repo LATICE-MIP sites \ud83d\udea7 NB! Which sites to include in published release is uncertain (2022 June 30) Site name Station name Lon (X) Lat (Y) Elevation (Z) Data years Data types Description FIN finseflux 7.527008533 60.59383774 1210 Nov 2016 (?) - present Long wave in (LWin), Long wave out (LWout), Short wave in (SWin), Short wave out (SWout), turbulent heat fluxes, precipitation, temperature, humidity, pressure, wind speed and direction, snow depths (surveys and single point), H2O, CO2, soil temperature, soil vol. water, soil conductivity, drone images Above current climatic tree- and forest lines. Alpine ridges, wetlands, lakes, heather and snowbed vegetation. hisaasen_upper 12.25481033 61.10516357 680 hisaasen_lower 12.25089836 61.1115036 640 iskoras 25.29547425 69.3408715 360 aas 10.781667 59.660278 93.2 hurdal 11.078142 60.372387 NA Vestland climate grid (SeedClim) sites The Vestland climate grid, often called the SeedClim grid after the first major project that set it up, is a set of calcareous grassland sites across gradients of precipitation and temperature. The sites have been, and still are, host to many ecological reseach projects that study vegetation dynamics, plant interactions, functional traits and climate responses. Each site also has loggers for temperature and other climatic variables. Central data papers: FunCaB Coming soon: INCLINE Coming soon: SeedClim Site name Name Lon (X) Lat (Y) Elevation (Z) Data years Data types Description ALP1 Ulvehaugen 8.12343 61.0243 1208 2008-2022 Vegetation surveys, vegetation demography, experimental treatments, weather data: [to be added] Above current climatic forest line. Semi-natural grassland, heather, ridges and snowbeds ALP2 Laavisdalen 7.27596 60.8231 1097 \" \" ALP3 Gudmedalen 7.17561 60.8328 1213 \" \" ALP4 Skjellingahaugen 6.41504 60.9335 1088 \" \" SUB1 Aalrust 8.70466 60.8203 815 Just below current climatic forest line. SUB2 Hoegsete 7.17666 60.8760 700 \" \" SUB3 Rambaera 6.63028 61.0866 769 \" \" SUB4 Veskre 6.51468 60.5445 797 \" \" BOR1 Fauske 9.07876 61.0355 589 Well below current climatic forest line. BOR2 Vikesland 7.16982 60.8803 474 \" \" BOR3 Arhelleren 6.33738 60.6652 431 \" \" BOR4 Oevstedal 5.96487 60.6901 346 \" \" Figure 1: Illustration from the first project using the Vestland Climate Grid (SeedClim). Turf squares (top soil, roots and whole plants) were cut out and physically transplanted to other sites, as indicated by the arrows in the top left corner. The vegetation in these turfs was carefully monitored over several years in their new locations, to see how and how quickly the plants adapted to a new environment. Figure 2: Field work at Ulvehaugen (ALP1). Ragnhild Gya and Joachim T\u00f6pper doing vegetation analysis in a 25x35cm metal frame. The small, white ( Tomst ) loggers track temperature and soil moisture, and the small weather station (wooden pole to the right) tracks additional weather data. The fence keeps sheep and other animals away from the plots, but the vegetation is semi-natural after decades or centuries of grazing. The clear, hexagonal Open-Top Chambers experimentally heat up the vegetation. Selected papers using the sites: T\u00f6pper JP., Meineri E, Olsen SL, Rydgren K, Skarpaas O., & Vandvik V. 2018. The devil is in the detail: non-additive and context-dependent plant population responses to increasing temperature and precipitation. Global Change Biology 24: 4657\u20134666. doi:10.1111/gcb.14336 Althuizen IHJ, Lee H, Sarneel J, & Vandvik V. 2018. Long-term climate regime modulates the impact of short-term climate variability on decomposition in alpine grassland soils. Ecosystems xx: xx-xx. https://doi.org/10.1007/s10021-018-0241-5 Delnevo N, Petraglia A, Carbognani M, Vandvik V, & Halbritter AH. 2018. Plastic and genetic responses to change in snowmelt time in reproductive phenology and growth of Ranunculus acris. Perspectives in Plant Ecology, Evolution and Systematics 30: 62-70 Klanderud K, Meineri E, T\u00f6pper, J, Michel P, Vandvik V. 2017. Biotic interaction effects on seedling recruitment along bioclimatic gradients: testing the stress gradient hypothesis. Journal of Vegetation Science 28: 347-356 M\u00fcnzbergov\u00e1 Z, Hadincov\u00e1 V, Sk\u00e1lov\u00e1 H, & Vandvik V. 2017. Genetic differentiation and plasticity interact along temperature and precipitation gradients to determine plant performance under climate change. Journal of Ecology 105: 1358\u20131373. DOI : 10.1111/1365-2745.12762 Graae BJ, Vandvik V, Armbruster WS, Eiserhardt WL, Svenning JC, Hylander K, Ehrl\u00e9n J, Speed JM, Klanderud K, Br\u00e5then KA, Milbau A, Opedal \u00d8H, Alsos IG, Ejrn\u00e6s R, Bruun HH, Birks HJB, Westergaard KB, Birks HH, & Lenoir J. 2018. Stay or go \u2013 how topographic complexity influences alpine plant population and community responses to climate change. Perspectives in Plant Ecology, Evolution and Systematics 30: 41-50. DOI: 10.1016/j.ppees.2017.09.008 Vandvik V, Elven R, & T\u00f6pper J. 2017. Seedling recruitment in subalpine grassland forbs: Predicting field regeneration behaviour from lab germination responses. Botany 95: 73\u201388. dx.doi.org/10.1139/cjb-2016-0022. Guittar J, Goldberg DE, Klanderud K, Telford RJ, & Vandvik V. 2016. Can trait patterns along gradients predict plant community responses to climate change? Ecology 97: 2791-2801. Olsen S. L., J. P. T\u00f6pper, O. Skarpaas, V. Vandvik, & K. Klanderud. 2016. From facilitation to competition: temperature-driven shift in dominant plant interactions affects population dynamics in semi-natural grasslands. Global Change Biology 22: 1915-1926. doi: 10.1111/gcb.13241 Skarpaas O., Meineri E.P., Bargmann T., P\u00f6tsch C., Spindelb\u00f6ck J.P., & Vandvik V. 2016. Biomass partitioning in grassland plants along independent gradients in temperature and precipitation. Perspectives in Plant Ecology, Evolution and Systematics 19:1-11. Vandvik V., Klanderud K., Meineri E.P., M\u00e5ren I.E., & Spindelb\u00f6ck J.P. 2016. Seed banks are biodiversity reservoirs: Species-area relationships above vs. below ground. Oikos 125: 218-228. doi: 10.1111/oik.02022 Klanderud K., Vandvik V., & Goldberg D.E. 2015. The importance of biotic vs. abiotic drivers of local plant community composition along regional bioclimatic gradients. PLoS One 10(6): e0130205. doi:10.1371/journal.pone.0130205 Tingstad L., Olsen S.L., Klanderud K., Vandvik V., & Ohlson M.O. 2015. Temperature, precipitation and biotic interactions as determinants of tree seedling recruitment across the tree line ecotone. Oecologia 179: 599-608. doi:10.1007/s00442-015-3360-0 Wasof S., Lenoir J., Aarrestad P.A., Alsos I.G., Armbruster W. S., Austrheim G., Bakkestuen V., Birks H.J.B., Br\u00e5then K. A., Broennimann O., Brunet J., Bruun H. H., Dahlberg C. J., Diekmann M., Dullinger S., Dynesius M., Ejrn\u00e6s R., G\u00e9gout J-C., Graae B. J., Grytnes J-A., Guisan A., Hylander K., J\u00f3nsd\u00f3ttir I. S., Kapfer J., Klanderud K., Luoto M., Milbau A., Moora M., Nygaard B., Odland A., Pauli H., Ravolainen V., Reinhardt S., Sandvik S. M., Schei F. H., Speed J. D. M., Svenning J-C., Thuiller W., Tveraabak L. U., Vandvik V., Velle L. G., Virtanen R., Vittoz P., Willner W., Wohlgemuth T., Zimmermann N. E., Zobel M., & Decocq G. 2015. Disjoint populations of European vascular plant species keep the same climatic niches. Global Change Biology 24: 1401-1412. 10.1111/geb.12375 Meineri E., Skarpaas O., Spindelb\u00f6ck J.S., Bargmann T., and Vandvik V. 2014. Direct and size-dependent climate effect on flowering performance in alpine and lowland herbaceous species. Journal of Vegetation Science 25: 275-278. DOI: 10.1111/jvs.12082 Lenoir J., Graae B.J., Aarrestad, P.A., Alsos I.G., Armbruster S., Austrheim G., Bergendorff C., Birks H.J.B., Br\u00e5then K.A., Brunet J., Bruun H.H., Dahlberg C., Decocq G., Diekmann M., Dynesius M., Ejrn\u00e6s R., Grytnes J.-A., Hylander K., Klanderud K., Luoto M., Milbau A., Moora M., Nygaard B., Odland A., Ravolainen V., Reinhardt S., Sandvik S., Schei F.H., Speed J., Tveraabak L., Vandvik V., Velle L.G., Virtanen R., Zobel M., Svenning J.-C. 2013. Strong local spatial buffering of climate-change impacts on species across Northern Europe. Global Change Biology 19: 1470-1481. DOI: 10.1111/gcb.12129. Highlighted by the editors in GCB. Meineri E., Spindelb\u00f6ck J.S., & Vandvik V. 2013. Seedling emergence responds to the climate of both recruitment site and seed source - A climate change experiment combining transplant and gradient approaches. Plant Ecology 214:607-619. DOI: 10.1007/s11258-013-0193-y Spindelb\u00f6ck J.P., Cook Z., Daws M.I., Heegaard E., M\u00e5ren I.E. & Vandvik V. 2013. Conditional cold avoidance drives variation in germination behaviour in Calluna vulgaris. Annals of Botany 112 (5): 801-810. Meineri E., Skarpaas O., & Vandvik V. 2012. Modeling alpine plant distributions at the landscape scale: Do biotic interactions matter? Ecological Modeling 231:1-10.","title":"Sites"},{"location":"land-sites/#noresm-land-sites","text":"We currently support 18 sites: 6 climate station sites of interest to the LATICE group and 12 Vestland climate grid sites. These locations are established study sites with climatic, and/or ecological data available. It is possible to add custom-made sites for somewhat experienced users. To plot site locations over a background map in R, you can also look at this repo","title":"NorESM land sites"},{"location":"land-sites/#latice-mip-sites-nb-which-sites-to-include-in-published-release-is-uncertain-2022-june-30","text":"Site name Station name Lon (X) Lat (Y) Elevation (Z) Data years Data types Description FIN finseflux 7.527008533 60.59383774 1210 Nov 2016 (?) - present Long wave in (LWin), Long wave out (LWout), Short wave in (SWin), Short wave out (SWout), turbulent heat fluxes, precipitation, temperature, humidity, pressure, wind speed and direction, snow depths (surveys and single point), H2O, CO2, soil temperature, soil vol. water, soil conductivity, drone images Above current climatic tree- and forest lines. Alpine ridges, wetlands, lakes, heather and snowbed vegetation. hisaasen_upper 12.25481033 61.10516357 680 hisaasen_lower 12.25089836 61.1115036 640 iskoras 25.29547425 69.3408715 360 aas 10.781667 59.660278 93.2 hurdal 11.078142 60.372387 NA","title":"LATICE-MIP sites \ud83d\udea7 NB! Which sites to include in published release is uncertain (2022 June 30)"},{"location":"land-sites/#vestland-climate-grid-seedclim-sites","text":"The Vestland climate grid, often called the SeedClim grid after the first major project that set it up, is a set of calcareous grassland sites across gradients of precipitation and temperature. The sites have been, and still are, host to many ecological reseach projects that study vegetation dynamics, plant interactions, functional traits and climate responses. Each site also has loggers for temperature and other climatic variables. Central data papers: FunCaB Coming soon: INCLINE Coming soon: SeedClim Site name Name Lon (X) Lat (Y) Elevation (Z) Data years Data types Description ALP1 Ulvehaugen 8.12343 61.0243 1208 2008-2022 Vegetation surveys, vegetation demography, experimental treatments, weather data: [to be added] Above current climatic forest line. Semi-natural grassland, heather, ridges and snowbeds ALP2 Laavisdalen 7.27596 60.8231 1097 \" \" ALP3 Gudmedalen 7.17561 60.8328 1213 \" \" ALP4 Skjellingahaugen 6.41504 60.9335 1088 \" \" SUB1 Aalrust 8.70466 60.8203 815 Just below current climatic forest line. SUB2 Hoegsete 7.17666 60.8760 700 \" \" SUB3 Rambaera 6.63028 61.0866 769 \" \" SUB4 Veskre 6.51468 60.5445 797 \" \" BOR1 Fauske 9.07876 61.0355 589 Well below current climatic forest line. BOR2 Vikesland 7.16982 60.8803 474 \" \" BOR3 Arhelleren 6.33738 60.6652 431 \" \" BOR4 Oevstedal 5.96487 60.6901 346 \" \" Figure 1: Illustration from the first project using the Vestland Climate Grid (SeedClim). Turf squares (top soil, roots and whole plants) were cut out and physically transplanted to other sites, as indicated by the arrows in the top left corner. The vegetation in these turfs was carefully monitored over several years in their new locations, to see how and how quickly the plants adapted to a new environment. Figure 2: Field work at Ulvehaugen (ALP1). Ragnhild Gya and Joachim T\u00f6pper doing vegetation analysis in a 25x35cm metal frame. The small, white ( Tomst ) loggers track temperature and soil moisture, and the small weather station (wooden pole to the right) tracks additional weather data. The fence keeps sheep and other animals away from the plots, but the vegetation is semi-natural after decades or centuries of grazing. The clear, hexagonal Open-Top Chambers experimentally heat up the vegetation. Selected papers using the sites: T\u00f6pper JP., Meineri E, Olsen SL, Rydgren K, Skarpaas O., & Vandvik V. 2018. The devil is in the detail: non-additive and context-dependent plant population responses to increasing temperature and precipitation. Global Change Biology 24: 4657\u20134666. doi:10.1111/gcb.14336 Althuizen IHJ, Lee H, Sarneel J, & Vandvik V. 2018. Long-term climate regime modulates the impact of short-term climate variability on decomposition in alpine grassland soils. Ecosystems xx: xx-xx. https://doi.org/10.1007/s10021-018-0241-5 Delnevo N, Petraglia A, Carbognani M, Vandvik V, & Halbritter AH. 2018. Plastic and genetic responses to change in snowmelt time in reproductive phenology and growth of Ranunculus acris. Perspectives in Plant Ecology, Evolution and Systematics 30: 62-70 Klanderud K, Meineri E, T\u00f6pper, J, Michel P, Vandvik V. 2017. Biotic interaction effects on seedling recruitment along bioclimatic gradients: testing the stress gradient hypothesis. Journal of Vegetation Science 28: 347-356 M\u00fcnzbergov\u00e1 Z, Hadincov\u00e1 V, Sk\u00e1lov\u00e1 H, & Vandvik V. 2017. Genetic differentiation and plasticity interact along temperature and precipitation gradients to determine plant performance under climate change. Journal of Ecology 105: 1358\u20131373. DOI : 10.1111/1365-2745.12762 Graae BJ, Vandvik V, Armbruster WS, Eiserhardt WL, Svenning JC, Hylander K, Ehrl\u00e9n J, Speed JM, Klanderud K, Br\u00e5then KA, Milbau A, Opedal \u00d8H, Alsos IG, Ejrn\u00e6s R, Bruun HH, Birks HJB, Westergaard KB, Birks HH, & Lenoir J. 2018. Stay or go \u2013 how topographic complexity influences alpine plant population and community responses to climate change. Perspectives in Plant Ecology, Evolution and Systematics 30: 41-50. DOI: 10.1016/j.ppees.2017.09.008 Vandvik V, Elven R, & T\u00f6pper J. 2017. Seedling recruitment in subalpine grassland forbs: Predicting field regeneration behaviour from lab germination responses. Botany 95: 73\u201388. dx.doi.org/10.1139/cjb-2016-0022. Guittar J, Goldberg DE, Klanderud K, Telford RJ, & Vandvik V. 2016. Can trait patterns along gradients predict plant community responses to climate change? Ecology 97: 2791-2801. Olsen S. L., J. P. T\u00f6pper, O. Skarpaas, V. Vandvik, & K. Klanderud. 2016. From facilitation to competition: temperature-driven shift in dominant plant interactions affects population dynamics in semi-natural grasslands. Global Change Biology 22: 1915-1926. doi: 10.1111/gcb.13241 Skarpaas O., Meineri E.P., Bargmann T., P\u00f6tsch C., Spindelb\u00f6ck J.P., & Vandvik V. 2016. Biomass partitioning in grassland plants along independent gradients in temperature and precipitation. Perspectives in Plant Ecology, Evolution and Systematics 19:1-11. Vandvik V., Klanderud K., Meineri E.P., M\u00e5ren I.E., & Spindelb\u00f6ck J.P. 2016. Seed banks are biodiversity reservoirs: Species-area relationships above vs. below ground. Oikos 125: 218-228. doi: 10.1111/oik.02022 Klanderud K., Vandvik V., & Goldberg D.E. 2015. The importance of biotic vs. abiotic drivers of local plant community composition along regional bioclimatic gradients. PLoS One 10(6): e0130205. doi:10.1371/journal.pone.0130205 Tingstad L., Olsen S.L., Klanderud K., Vandvik V., & Ohlson M.O. 2015. Temperature, precipitation and biotic interactions as determinants of tree seedling recruitment across the tree line ecotone. Oecologia 179: 599-608. doi:10.1007/s00442-015-3360-0 Wasof S., Lenoir J., Aarrestad P.A., Alsos I.G., Armbruster W. S., Austrheim G., Bakkestuen V., Birks H.J.B., Br\u00e5then K. A., Broennimann O., Brunet J., Bruun H. H., Dahlberg C. J., Diekmann M., Dullinger S., Dynesius M., Ejrn\u00e6s R., G\u00e9gout J-C., Graae B. J., Grytnes J-A., Guisan A., Hylander K., J\u00f3nsd\u00f3ttir I. S., Kapfer J., Klanderud K., Luoto M., Milbau A., Moora M., Nygaard B., Odland A., Pauli H., Ravolainen V., Reinhardt S., Sandvik S. M., Schei F. H., Speed J. D. M., Svenning J-C., Thuiller W., Tveraabak L. U., Vandvik V., Velle L. G., Virtanen R., Vittoz P., Willner W., Wohlgemuth T., Zimmermann N. E., Zobel M., & Decocq G. 2015. Disjoint populations of European vascular plant species keep the same climatic niches. Global Change Biology 24: 1401-1412. 10.1111/geb.12375 Meineri E., Skarpaas O., Spindelb\u00f6ck J.S., Bargmann T., and Vandvik V. 2014. Direct and size-dependent climate effect on flowering performance in alpine and lowland herbaceous species. Journal of Vegetation Science 25: 275-278. DOI: 10.1111/jvs.12082 Lenoir J., Graae B.J., Aarrestad, P.A., Alsos I.G., Armbruster S., Austrheim G., Bergendorff C., Birks H.J.B., Br\u00e5then K.A., Brunet J., Bruun H.H., Dahlberg C., Decocq G., Diekmann M., Dynesius M., Ejrn\u00e6s R., Grytnes J.-A., Hylander K., Klanderud K., Luoto M., Milbau A., Moora M., Nygaard B., Odland A., Ravolainen V., Reinhardt S., Sandvik S., Schei F.H., Speed J., Tveraabak L., Vandvik V., Velle L.G., Virtanen R., Zobel M., Svenning J.-C. 2013. Strong local spatial buffering of climate-change impacts on species across Northern Europe. Global Change Biology 19: 1470-1481. DOI: 10.1111/gcb.12129. Highlighted by the editors in GCB. Meineri E., Spindelb\u00f6ck J.S., & Vandvik V. 2013. Seedling emergence responds to the climate of both recruitment site and seed source - A climate change experiment combining transplant and gradient approaches. Plant Ecology 214:607-619. DOI: 10.1007/s11258-013-0193-y Spindelb\u00f6ck J.P., Cook Z., Daws M.I., Heegaard E., M\u00e5ren I.E. & Vandvik V. 2013. Conditional cold avoidance drives variation in germination behaviour in Calluna vulgaris. Annals of Botany 112 (5): 801-810. Meineri E., Skarpaas O., & Vandvik V. 2012. Modeling alpine plant distributions at the landscape scale: Do biotic interactions matter? Ecological Modeling 231:1-10.","title":"Vestland climate grid (SeedClim) sites"},{"location":"user_guide/","text":"User guide \ud83d\udea7 under construction - please help us by reporting errors and questions on our issues page This is the user guide for running point simulations with the NorESM LandSites Platform \ud83c\udf0d You will need to open two new windows in the process, so it's a good idea to use two screens or to make this window narrower so you can see both the user guide and another window next to it. TL;DR quick start \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfc3\u200d\u2642\ufe0f If you have already completed first-time setup and know what you are doing, here is the extremely quick user guide. In a terminal where you have the repository: $ cd NorESM_LandSites_platform $ docker-compose up Wait until the terminal messages stop. Open the container GUI: localhost:8080 and push buttons, and access jypyter notebooks on localhost:8888 \ud83c\udf89 Step by step guide for using the platform 0. Prerequisites (first time setup) \ud83c\udf31 To use the NorESM LandSites Platform, you need to install Git (and make a user account) and Docker desktop before you can clone the repository (= download platform scripts) and start working with the Docker container. If you don't want to make a GitHub account, you may try to download and unpack the repository manually instead with the code button and \u00b4download zip\u00b4. Step by step (with steps in brackets only sometimes necessary, depending on your computer): Create a GitHub account (optional, but generally recommended) Install Git on your machine. For Windows: https://gitforwindows.org/, other: https://github.com/git-guides/install-git Install Docker desktop , might require restart (Install Docker Compose; should already be included in the Docker installation described above for Mac and Windows: install docker-compose ) (Remarks for Windows: You may have to install WSL2 (the 'two' is important here) manually if prompted. Follow the steps described here . To open the Windows Command Prompt terminal as an administrator, type cmd into the Windows search bar located next to the Start Symbol (lower-left corner of the screen), right-click on 'Command Prompt', and select 'Run as administrator'. Also, note that some steps in the guide are executed in the 'Command Prompt' and some are executed in the 'Windows PowerShell'; to open the latter, type 'PowerShell' into the search bar and open as administrator. If Docker complains about you not belonging to the correct 'user group' after successful installation, follow the steps described here Open file explorer and find a suitable folder to serve as working directory. This is where you will store the repository and installation files needed by the platform, as well as your output files (which may take up quite a bit of space!). Your working directory should be somewhere on your C: drive, for instance C:/Users/yourusername (and not on OneDrive, USB sticks or your overly-cluttered desktop \ud83d\udc40). When you are in your chosen working directory, right-click and choose \"Git Bash here\". In the terminal that pops up, paste in the following line by right-clicking: $ git clone https://github.com/NorESMhub/NorESM_LandSites_Platform.git --config core.autocrlf=input This will download (= clone) the repository (= folder structure and files) to your working directory. You can now see the folder and files in your file explorer. Most of the files can be opened in a text editor like Notepad if you want to look at their contents. Once Git, Docker desktop and the repository are in place, you don't have to do this again. When you are using the platform has been updated the next time you want to use it, you might want to download the updates by typing first git pull and then docker-compose pull into Git Bash from your local clone of the repository. 1. Start the container \ud83e\uddf0 In the working directory where you have cloned the repository, open a terminal by right-clicking and choosing \"Git Bash here\" (or use the one you already have open if you just did the first time setup). Make sure you are inside the folder containing the docker-compose.yaml file (type ls and hit enter to list the files in the current folder; if you see NorESM_LandSites_Platform, you need to change directory into that folder by typing \u00b4cd NorESM_LandSites_Platform\u00b4). Then write this command and hit enter to get the container up and running: $ docker-compose up The first time you execute this command, a lot of files will be downloaded first and it might take some time. When the container is up and running, the bottom messages in your terminal will look something like the screenshot below (NB! Do not close the container by pressing Ctrl+C , only close it once you are finished with this user guide). Now you can access the container through your browser by opening this link (right-click and open in new tab or window): localhost:8080 You can also see the container in the Docker desktop app under Containers/Apps. 2. Inside GUI: Set simulation settings \u2699\ufe0f Now you can open the graphical user interface (=GUI) at localhost:8080 for setting up and running simulations. This interface has access to the Docker container you started in step 1. If you are doing a quick test with default platform settings , just pick a site and click create case and then run . The GUI should look like this: 2.1 Choose a site by clicking either a button or a point on the map! 2.2 Download site data button (optional) The download site data button allows you to download the input data for your selected site. The data is already available in the container, so you don't need to do this. We provide a notebook called input_visualization.ipynb which you can open in Jupyterlab on localhost:8888 to explore some of the data that goes in to a simulation. This is a good thing to do while your case is running (which might take some time). 2.3 Create case With the create case button, you can look at and edit some model settings and parameters as you create a new case. This is not an exhaustive list of possible changes (by far), but give you easy access to some options. All the boxes have default values for a quick but not especially realistic simulation. The box that pops up with settings has four tabs: CTSM (=Community Terrestrial Systems Model) settings for general options like simulation period. CLM / Namelist settings where you can change CO2 concentration, switch some modules of/off. CLM / Namelist / history settings where advanced users can set how and when the simulation output is stored. FATES parameters where you can disable some Plant Functional Types (PFTs) and change some vegetation parameters. Once you have created your case with the desired settings, it will appear in a list of cases with the case ID, status, creation date, grid information, component set, a link to view the settings you specified, and some buttons with more options. Pay attention to the Status, which will transition from pending to ready when the case has been built. 3. Run your simulations \ud83d\udc69\u200d\ud83d\udcbb Once the case is ready, you can start the simulation with \u00b4run\u00b4. There is a button to \u00b4download\u00b4 the output when the run is finished, and to \u00b4edit\u00b4 the settings and create a new case, or \u00b4delete\u00b4 the case. Depending of how long you asked the model to run for (default is 1 year), and your hardware, the simulation can take some time \u23f3. On a regular laptop, one year of simulation of a single site (= gridcell) might take ~5-20 minutes. Make sure your computer is not running other heavy programs simultaneously (like GIS, Photoshop or 1000 open browser tabs \ud83d\udc40). The Docker container you started in step 1 is performing the simulation using your local computer. Advanced users may also use the container on an HPC cluster to speed up long simulations. While you wait for the simulation to finish, you may like to inspect the model input data more closely. Open a new browser tab and go to the Docker container at localhost:8888 . Navigate to the \u00b4notebooks\u00b4 folder and open the \u00b4input_visualization.ipynb\u00b4 notebook. It will guide you through some of the input data for the model. Soon your simulations will be finished! \ud83c\udf89 Your screen might look something like this for two similar cases for the BOR1 site that have finished running: If you got an error message somewhere along the way, please head over to our GitHub and write an issue describing what happened, what machine you are on (mac/windows/HPC etc.), and copy in the error message and any other relevant information. Output will be stored at time intervals you set (default is monthly), and can be downloaded from the container with the \u00b4download\u00b4 button or viewed in the data/output folder in the container. 4. Look at your output \ud83d\udcc8 Output is stored in the data/output folder in the container, accessed on localhost:8888 . Nagivate to the \u00b4notebooks\u00b4 folder and open the \u00b4output_visualization.ipynb\u00b4 notebook. It guides you through some ways of looking at the model output, though there are many other ways to do this and much more model output available! Output files can alternatively be opened in Panoply, R, or using python on your local computer. 5. Close the container NB! The container will continue to run unless you stop it. When you are finished with simulations and output processing and downloading things you might need offline, go back to your Git Bash terminal and press \u00b4Ctrl+c\u00b4.","title":"User guide"},{"location":"user_guide/#user-guide","text":"\ud83d\udea7 under construction - please help us by reporting errors and questions on our issues page This is the user guide for running point simulations with the NorESM LandSites Platform \ud83c\udf0d You will need to open two new windows in the process, so it's a good idea to use two screens or to make this window narrower so you can see both the user guide and another window next to it.","title":"User guide"},{"location":"user_guide/#tldr-quick-start","text":"If you have already completed first-time setup and know what you are doing, here is the extremely quick user guide. In a terminal where you have the repository: $ cd NorESM_LandSites_platform $ docker-compose up Wait until the terminal messages stop. Open the container GUI: localhost:8080 and push buttons, and access jypyter notebooks on localhost:8888 \ud83c\udf89","title":"TL;DR quick start \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfc3\u200d\u2642\ufe0f"},{"location":"user_guide/#step-by-step-guide-for-using-the-platform","text":"","title":"Step by step guide for using the platform"},{"location":"user_guide/#0-prerequisites-first-time-setup","text":"To use the NorESM LandSites Platform, you need to install Git (and make a user account) and Docker desktop before you can clone the repository (= download platform scripts) and start working with the Docker container. If you don't want to make a GitHub account, you may try to download and unpack the repository manually instead with the code button and \u00b4download zip\u00b4. Step by step (with steps in brackets only sometimes necessary, depending on your computer): Create a GitHub account (optional, but generally recommended) Install Git on your machine. For Windows: https://gitforwindows.org/, other: https://github.com/git-guides/install-git Install Docker desktop , might require restart (Install Docker Compose; should already be included in the Docker installation described above for Mac and Windows: install docker-compose ) (Remarks for Windows: You may have to install WSL2 (the 'two' is important here) manually if prompted. Follow the steps described here . To open the Windows Command Prompt terminal as an administrator, type cmd into the Windows search bar located next to the Start Symbol (lower-left corner of the screen), right-click on 'Command Prompt', and select 'Run as administrator'. Also, note that some steps in the guide are executed in the 'Command Prompt' and some are executed in the 'Windows PowerShell'; to open the latter, type 'PowerShell' into the search bar and open as administrator. If Docker complains about you not belonging to the correct 'user group' after successful installation, follow the steps described here Open file explorer and find a suitable folder to serve as working directory. This is where you will store the repository and installation files needed by the platform, as well as your output files (which may take up quite a bit of space!). Your working directory should be somewhere on your C: drive, for instance C:/Users/yourusername (and not on OneDrive, USB sticks or your overly-cluttered desktop \ud83d\udc40). When you are in your chosen working directory, right-click and choose \"Git Bash here\". In the terminal that pops up, paste in the following line by right-clicking: $ git clone https://github.com/NorESMhub/NorESM_LandSites_Platform.git --config core.autocrlf=input This will download (= clone) the repository (= folder structure and files) to your working directory. You can now see the folder and files in your file explorer. Most of the files can be opened in a text editor like Notepad if you want to look at their contents. Once Git, Docker desktop and the repository are in place, you don't have to do this again. When you are using the platform has been updated the next time you want to use it, you might want to download the updates by typing first git pull and then docker-compose pull into Git Bash from your local clone of the repository.","title":"0. Prerequisites (first time setup) \ud83c\udf31"},{"location":"user_guide/#1-start-the-container","text":"In the working directory where you have cloned the repository, open a terminal by right-clicking and choosing \"Git Bash here\" (or use the one you already have open if you just did the first time setup). Make sure you are inside the folder containing the docker-compose.yaml file (type ls and hit enter to list the files in the current folder; if you see NorESM_LandSites_Platform, you need to change directory into that folder by typing \u00b4cd NorESM_LandSites_Platform\u00b4). Then write this command and hit enter to get the container up and running: $ docker-compose up The first time you execute this command, a lot of files will be downloaded first and it might take some time. When the container is up and running, the bottom messages in your terminal will look something like the screenshot below (NB! Do not close the container by pressing Ctrl+C , only close it once you are finished with this user guide). Now you can access the container through your browser by opening this link (right-click and open in new tab or window): localhost:8080 You can also see the container in the Docker desktop app under Containers/Apps.","title":"1. Start the container \ud83e\uddf0"},{"location":"user_guide/#2-inside-gui-set-simulation-settings","text":"Now you can open the graphical user interface (=GUI) at localhost:8080 for setting up and running simulations. This interface has access to the Docker container you started in step 1. If you are doing a quick test with default platform settings , just pick a site and click create case and then run . The GUI should look like this:","title":"2. Inside GUI: Set simulation settings \u2699\ufe0f"},{"location":"user_guide/#21-choose-a-site","text":"by clicking either a button or a point on the map!","title":"2.1 Choose a site"},{"location":"user_guide/#22-download-site-data-button-optional","text":"The download site data button allows you to download the input data for your selected site. The data is already available in the container, so you don't need to do this. We provide a notebook called input_visualization.ipynb which you can open in Jupyterlab on localhost:8888 to explore some of the data that goes in to a simulation. This is a good thing to do while your case is running (which might take some time).","title":"2.2 Download site data button (optional)"},{"location":"user_guide/#23-create-case","text":"With the create case button, you can look at and edit some model settings and parameters as you create a new case. This is not an exhaustive list of possible changes (by far), but give you easy access to some options. All the boxes have default values for a quick but not especially realistic simulation. The box that pops up with settings has four tabs: CTSM (=Community Terrestrial Systems Model) settings for general options like simulation period. CLM / Namelist settings where you can change CO2 concentration, switch some modules of/off. CLM / Namelist / history settings where advanced users can set how and when the simulation output is stored. FATES parameters where you can disable some Plant Functional Types (PFTs) and change some vegetation parameters. Once you have created your case with the desired settings, it will appear in a list of cases with the case ID, status, creation date, grid information, component set, a link to view the settings you specified, and some buttons with more options. Pay attention to the Status, which will transition from pending to ready when the case has been built.","title":"2.3 Create case"},{"location":"user_guide/#3-run-your-simulations","text":"Once the case is ready, you can start the simulation with \u00b4run\u00b4. There is a button to \u00b4download\u00b4 the output when the run is finished, and to \u00b4edit\u00b4 the settings and create a new case, or \u00b4delete\u00b4 the case. Depending of how long you asked the model to run for (default is 1 year), and your hardware, the simulation can take some time \u23f3. On a regular laptop, one year of simulation of a single site (= gridcell) might take ~5-20 minutes. Make sure your computer is not running other heavy programs simultaneously (like GIS, Photoshop or 1000 open browser tabs \ud83d\udc40). The Docker container you started in step 1 is performing the simulation using your local computer. Advanced users may also use the container on an HPC cluster to speed up long simulations. While you wait for the simulation to finish, you may like to inspect the model input data more closely. Open a new browser tab and go to the Docker container at localhost:8888 . Navigate to the \u00b4notebooks\u00b4 folder and open the \u00b4input_visualization.ipynb\u00b4 notebook. It will guide you through some of the input data for the model. Soon your simulations will be finished! \ud83c\udf89 Your screen might look something like this for two similar cases for the BOR1 site that have finished running: If you got an error message somewhere along the way, please head over to our GitHub and write an issue describing what happened, what machine you are on (mac/windows/HPC etc.), and copy in the error message and any other relevant information. Output will be stored at time intervals you set (default is monthly), and can be downloaded from the container with the \u00b4download\u00b4 button or viewed in the data/output folder in the container.","title":"3. Run your simulations \ud83d\udc69\u200d\ud83d\udcbb"},{"location":"user_guide/#4-look-at-your-output","text":"Output is stored in the data/output folder in the container, accessed on localhost:8888 . Nagivate to the \u00b4notebooks\u00b4 folder and open the \u00b4output_visualization.ipynb\u00b4 notebook. It guides you through some ways of looking at the model output, though there are many other ways to do this and much more model output available! Output files can alternatively be opened in Panoply, R, or using python on your local computer.","title":"4. Look at your output \ud83d\udcc8"},{"location":"user_guide/#5-close-the-container","text":"NB! The container will continue to run unless you stop it. When you are finished with simulations and output processing and downloading things you might need offline, go back to your Git Bash terminal and press \u00b4Ctrl+c\u00b4.","title":"5. Close the container"}]}