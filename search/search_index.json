{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation of the NorESM LandSites Platform This page describes what the platform contains, how the input data were made, the main functionalities, and model output. Users should go to this user guide , and refer to this documentation for further detail. Advanced users may also be interested in the technical documentation of FATES and CLM . The main code is stored here in a GitHub repository . The main branch stores the latest functioning version, and development is done on platform_dev . Older versions can be accessed under Releases . This documentation page is made with GitHub pages ( gh-pages branch) and Mkdocs. To run model simulations, go to our user guide . Advanced users who want to do development in addition to just running simulations can request resources on e.g. NREC . An early version of the platform is also available on Galaxy . \ud83d\udea7 NB! This documentation is still under construction. Some parts are missing or may be written for older testing versions. Please let us know if you have suggestions for something to add or explain better in the issues \ud83d\udea7 Platform content You can use the platform to run single-cell model simulations in a Docker container. We provide sites with high quality input data (atmospheric forcing, land surface data, 'spin-up'), and narrow down the long list of possible output variables into something manageable. \ud83d\udea7 add an illustration here Docker container A Docker file is used to enable simulations on any machine, such as a laptop or an HPC cluster. When we release a new version, we have to build a container using this Docker file. Users can then download the dontainer and run simulations there. The reason for using a container is that the NorESM model code is not an app but rather a collection of code, and that code needs to be modified in order to run on a new machine. To make the model more like a downloadable app for any machine (e.g. your mac/windows/linux laptop/pc), we put the code in a Docker container that works as a mini-machine within your machine (laptop/pc). For details on the docker file and how to modify or update it, look the this description on GitHub Graphical user interface Users can set up cases, change some model settings, and run simulations via a GUI, which is run from a Docker container. Once the container is correctly up and running, the GUI will be available at localhost:8080 Model versions The platform is built to run the land model (CLM) with the Norwegian Earth System Model (as opposed to e.g. CESM which also uses the same land model). The versions of FATES and CLM therefore have to be in line with stable NorESM versions. NorESM is taken in to the platform using the noresm_landsites branch in the NorESMhub/NorESM repository . Release 0.1.0-dev Model Version NorESM CLM ctsm5.1.dev026 FATES sci.1.43.2_api.14.2.0 Compsets Short for component sets, compsets specify which component models are used as well as specific settings for forcing scenarios and physics options. NorESM consists of several sub-models (components) for the atmosphere, land, ocean, etc, plus some common infrastructure code that allows the components to pass information back and forth at certain time steps. Component sets have a short name and a longer name with abbreviations denoting the components included. See more in the CLM user guide . The compset is specified by combining components in this order: atm, lnd, ice, ocn, river, glc, and wave. Each component model version may be \"active,\" \"data,\" \"dead,\" or \"stub\". Stub components are used instead of active to save computation time and input requirements when that component is not needed for the model configuration. For instance, the active land component forced with atmospheric data, does not need ice, ocn, or glc components to be active and can replace them with stubs. TIME: Initialization Time, here for the year 2000 which gives present day conditions (as opposed to pre-industrial or future) of e.g. CO 2 ppm. ATM: Atmosphere, here DATM%1PTGSWP3 for data driven (D) atmosphere (ATM) component driven in a point (PT) by GSWP3 forcing data LND: Land, here CLM50%FATES/BGC/SP for active Community Land Model version 5.0 and one of the following vegetation modes: Functionally Assembled Terrestrial Ecosystem Simulator vegetation (FATES) FATES with BioGeoChemistry (BGC) FATES simplified mode with Satellite Phenology (SP) ICE: Sea-ice, here SICE stub ice OCN: Ocean, here SOCN stub ocean ROF: River runoff, here MOSART the MOdel for Scale Adaptive River Transport GLC: Land Ice, here SGLC stub glacier (land ice) component WAV: Wave, here SWAV stub wave component The compset longname defines it in the code with the following notation: TIME_ATM[%phys]\\_LND[%phys]\\_ICE[%phys]\\_OCN[%phys]\\_ROF[%phys]\\_GLC[%phys]\\_WAV[%phys] . Currently, we only support the following compsets using FATES: 2000_DATM%1PTGSWP3_CLM50%FATES_SICE_SOCN_MOSART_SGLC_SWAV More compsets for pre-industrial or future simulations require additional input data and may be included in future versions of the platform. For now, if you need other compsets you need to dig deeper into the CLM technical documentation and provide the necessary input data and code changes yourself. Input data Running the model requires specifying compsets, atmospheric forcing, land surface parameters, and spin-up to get realistic simulations. The input data are here , with a readme file with further detail. The .tar files are compressed, and can be opened as a folder with e.g. 7-zip by right-clicking and choosing 'open archive', and used after extracting (unzipping). The data files are stored in .nc (NetCDF) format, which can be viewed using Panoply , or packages in Python or R . The output data from simulations are stored in the same format. The input data .tar file contains three folders: (1) 'shared' domain files with gridcell longitude, latitude, and area; (2) land (=lnd) surface data, and (3) atmosphere (=atm) data. The input data are site -specific. Atmospheric forcing Atmospheric forcing data drives the modelled climate using a time series of climatic variables. Downloadable data products exist, but is often on too coarse scales for realistic single-point simulations. Here is a list of atmospheric forcing variables used in CLM: Incident solar radiation (FSDS), W/m2 Temperature at the lowest atmospheric level (TBOT), degrees K (or can be C) Precipitation (PRECTmms), mm/s Wind speed at the lowest atmospheric level (WIND), m/s Forcing data for our sites are stored with the rest of the input data . Here are some exaples of what the input data .tar contains: CAM/chem/trop_mozart_aero/aero/ aerosol deposition: dust, black carbon, organic carbon datm7 GSWP3v1: monthly atmospheric forcing from the GSWP3 data product. The climatic variables in the above list are stored in these files. NASA_LIS: lightning frequency topo_forcing: topography height If you have your own data, you can replace the default input files with your own. under construction: Instruction for how to do this . Make sure the format and units are the exact same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation Surface data Surface data contains information the model needs about the land surface, such as land use trajectories, soil properties, vegetation parameters, and albedo . Here are some exaples of what the input data .tar contains: 'firedata' population density 'paramdata' CLM5 parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allocation of carbon, photosynthetic pathway FATES parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allometry, carbon pools, nitrogen uptake, mortality, recruitment, fuel load for fire module 'snicardata' snow \"growth\" parameters snow \"optics\" 'surfdata_map' surface data: soil depth & other properties, albedo & thermal conductance of different surface types, and fraction of gridcell covered by vegetation, land, & other land cover types 'urbandata' urban classes, building interior temperature Note that when CLM is running without FATES, a simpler 'big-leaf'-version of vegetation is used instead. The CLM5 and FATES parameters thus overlap to some degree, with FATES replacing some and adding other parameters when activated. For the Vestland climate grid sites , surface data has been created from raw data sets, using this script . There are publicly available data products that could be downloaded and extracted for the nearest model gridcell, given points coordinates, that contain all the necessary surface data. We have not used this; our surface data is interpolated from raw data sets of better resolution. This data should be more accurate than the alternative data products. If you have your own data, you can replace the default input files with your own. under construction: Instruction for how to do this . Make sure the format and units are the same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation Spin-up To get realistic simulations, the model needs to run for a while to reach a state of equilibrium under the applied forcing. Starting the model from \"bare ground\", the climate is not in equilibrium, there is no or only unrealistic soil, and the model needs time to grow and kill vegetation to get appropriate soil properties and a stable climate. We provide \"restart\" files for our sites with the following spin-up phase settings: under construction Running simulations To run simulations, see the user guide . To run a simulation, you need to set up a case which tells the model how to run. A case can be run several times, or stopped and started again. The NorESM platform provides a settings file that will set some basic information, and scripts to simplify running the case(s). Under NorESM_LandSites_Platform/landsites_tools/simulation/ there are python scripts make_cases.py and run_cases.py . These scripts set up a simulation case directory and creates, builds and downloads input data for the model. For more detailed information on what goes on in CLM and its coupler (which connects CLM to other model components), see this CIME user guide , but note that the NorESM modelling platform uses these commands and scripts more indirectly. The settings file and python scripts combine several of these options and commands to simplify the process of running simulations. Settings file Users can customise model settings with a settings file created through the container -- see the user guide . All required information to prepare and run CLM-FATES cases for the available Norwegian land sites is provided via a settings.txt file. A template, which also serves as the default settings if no changes are made, is stored under ~/NorESM_LandSites_Platform/landsites_tools/ . The settings file has the following contents: setting description dir_cases cases root folder, absolute or relative to project dir dir_clm_input clm input root folder, absolute or relative to project dir dir_output output root folder, absolute or relative to project dir start_time at what time should simulation start? Format yyyy-mm-dd hh:mm, default 2000-01-01 end_time at what time should simulation stop? Format yyyy-mm-dd, default 2001-01-01 sites2run which sites should be simulated? Make sure the names are correct! Fetches from data/.dicts/sites.json. Default is ALP1 and ALP2 type_run What type of model run do you want? startup, hybrid, branch, restart. Default is startup type_model CLM-SP, CLM-BGC, CLM-FATES, FATES-SP, FATES-nocomp, FATES-hydro. Default is CLM-SP initial_file initial conditions (empty: cold start) frequency_output At what frequency should output be stored? Monthly/daily/hourly. Default is monthly, which gives all variables variables_output which output variables to store. CLM has many more to choose from variables_plot Which variables to plot frequency_plot Timestep of plotting. Default daily. vegetation_types_FATES to be implemented output_groups to be implemented The last lines (not shown here) also specify some paths that users should not touch. Running the make_cases script will fill those in automatically. If you are changing the settings file manually, be careful with formatting! Upper/lowercase, spaces and symbols need to be correct for it to work. model run types model run type description startup a 'cold' start from bare ground. The vegetation and climate is not in equilibrium and the model will not produce realistic output. No spin-up is included. Use this mode for quick testing, or for making your own spin-up. hybrid the model is initialized similar to a startup run, but uses initialization datasets from a previous case. Suitable when you already have good spin-up files and want a more realistic simulation. branch the model is initialized using a consistent set of restart files from a previous run. The case name is generally changed for a branch run, although it does not have to be. Branch runs are suitable for sensitivity or parameter studies, or when settings for history file output streams need to be modified while still maintaining bit-for-bit reproducibility. restart continues running an existing case after it has been stopped. model types \ud83d\udea7 This setting is where users can change the model component set . \ud83d\udea7 Currently, only the CLM-FATES option works and the rest are placeholders for future developments. model run type description under construction CLM-SP satellite phenology. CLM-BCG biogeochemistry CLM-FATES FATES vegetation FATES-SP FATES but with satellite phenology FATES-nocomp FATES without competition FATES-hydro FATES with different hydrology make_cases.py This python script creates, builds, and sets up CTSM cases for predefined or custom site locations . It is either using the simulation options specified in a 'settings.txt' file or asks for interactive command line input to create one. Input data is automatically downloaded unless custom input data has been added. When making a new case, it first creates a case directory containing the scripts and XML files to configure a case. Then, it creates scripts needed to run the model along with namelist files . Finally, it compiles the model and builds the executable file from which the case is run. The make_cases.py script uses helper scripts stored in the utils/ folder and commands experienced CLM users will be familiar with, namely create_newcase , case.setup and case.build . run_cases.py This python script runs previously built cases made with make_cases.py . The respective paths need to be defined in a 'settings.txt' file. The model output files will be created in the data/output/CASE_NAME directory by default, but a different path can be specified. Depending on the length of simulation, and computational resources available, this can take some time. The script calls on the case.submit command that experienced CLM users will be familiar with. Postprocess output files Output is stored in .nc (NetCDF) format, which can be viewed using Panoply, or packages in Python or R history variables Each output .nc file contains information for several history variables, such as ... under construction plotting Suggestions for plotting output are given in a Jupyter notebook in the repository under the /notebooks directory. In future versions, we hope to add more postprocessing and plotting functionality. Versions Platform versions follow standard numbering, and releases below 1 should be considered unstable and preliminary. List of versions (newest on top): release ... tag 0.1.0-dev","title":"Home"},{"location":"#welcome-to-the-documentation-of-the-noresm-landsites-platform","text":"This page describes what the platform contains, how the input data were made, the main functionalities, and model output. Users should go to this user guide , and refer to this documentation for further detail. Advanced users may also be interested in the technical documentation of FATES and CLM . The main code is stored here in a GitHub repository . The main branch stores the latest functioning version, and development is done on platform_dev . Older versions can be accessed under Releases . This documentation page is made with GitHub pages ( gh-pages branch) and Mkdocs. To run model simulations, go to our user guide . Advanced users who want to do development in addition to just running simulations can request resources on e.g. NREC . An early version of the platform is also available on Galaxy . \ud83d\udea7 NB! This documentation is still under construction. Some parts are missing or may be written for older testing versions. Please let us know if you have suggestions for something to add or explain better in the issues \ud83d\udea7","title":"Welcome to the documentation of the NorESM LandSites Platform"},{"location":"#platform-content","text":"You can use the platform to run single-cell model simulations in a Docker container. We provide sites with high quality input data (atmospheric forcing, land surface data, 'spin-up'), and narrow down the long list of possible output variables into something manageable. \ud83d\udea7 add an illustration here","title":"Platform content"},{"location":"#docker-container","text":"A Docker file is used to enable simulations on any machine, such as a laptop or an HPC cluster. When we release a new version, we have to build a container using this Docker file. Users can then download the dontainer and run simulations there. The reason for using a container is that the NorESM model code is not an app but rather a collection of code, and that code needs to be modified in order to run on a new machine. To make the model more like a downloadable app for any machine (e.g. your mac/windows/linux laptop/pc), we put the code in a Docker container that works as a mini-machine within your machine (laptop/pc). For details on the docker file and how to modify or update it, look the this description on GitHub","title":"Docker container"},{"location":"#graphical-user-interface","text":"Users can set up cases, change some model settings, and run simulations via a GUI, which is run from a Docker container. Once the container is correctly up and running, the GUI will be available at localhost:8080","title":"Graphical user interface"},{"location":"#model-versions","text":"The platform is built to run the land model (CLM) with the Norwegian Earth System Model (as opposed to e.g. CESM which also uses the same land model). The versions of FATES and CLM therefore have to be in line with stable NorESM versions. NorESM is taken in to the platform using the noresm_landsites branch in the NorESMhub/NorESM repository .","title":"Model versions"},{"location":"#release-010-dev","text":"Model Version NorESM CLM ctsm5.1.dev026 FATES sci.1.43.2_api.14.2.0","title":"Release 0.1.0-dev"},{"location":"#compsets","text":"Short for component sets, compsets specify which component models are used as well as specific settings for forcing scenarios and physics options. NorESM consists of several sub-models (components) for the atmosphere, land, ocean, etc, plus some common infrastructure code that allows the components to pass information back and forth at certain time steps. Component sets have a short name and a longer name with abbreviations denoting the components included. See more in the CLM user guide . The compset is specified by combining components in this order: atm, lnd, ice, ocn, river, glc, and wave. Each component model version may be \"active,\" \"data,\" \"dead,\" or \"stub\". Stub components are used instead of active to save computation time and input requirements when that component is not needed for the model configuration. For instance, the active land component forced with atmospheric data, does not need ice, ocn, or glc components to be active and can replace them with stubs. TIME: Initialization Time, here for the year 2000 which gives present day conditions (as opposed to pre-industrial or future) of e.g. CO 2 ppm. ATM: Atmosphere, here DATM%1PTGSWP3 for data driven (D) atmosphere (ATM) component driven in a point (PT) by GSWP3 forcing data LND: Land, here CLM50%FATES/BGC/SP for active Community Land Model version 5.0 and one of the following vegetation modes: Functionally Assembled Terrestrial Ecosystem Simulator vegetation (FATES) FATES with BioGeoChemistry (BGC) FATES simplified mode with Satellite Phenology (SP) ICE: Sea-ice, here SICE stub ice OCN: Ocean, here SOCN stub ocean ROF: River runoff, here MOSART the MOdel for Scale Adaptive River Transport GLC: Land Ice, here SGLC stub glacier (land ice) component WAV: Wave, here SWAV stub wave component The compset longname defines it in the code with the following notation: TIME_ATM[%phys]\\_LND[%phys]\\_ICE[%phys]\\_OCN[%phys]\\_ROF[%phys]\\_GLC[%phys]\\_WAV[%phys] . Currently, we only support the following compsets using FATES: 2000_DATM%1PTGSWP3_CLM50%FATES_SICE_SOCN_MOSART_SGLC_SWAV More compsets for pre-industrial or future simulations require additional input data and may be included in future versions of the platform. For now, if you need other compsets you need to dig deeper into the CLM technical documentation and provide the necessary input data and code changes yourself.","title":"Compsets"},{"location":"#input-data","text":"Running the model requires specifying compsets, atmospheric forcing, land surface parameters, and spin-up to get realistic simulations. The input data are here , with a readme file with further detail. The .tar files are compressed, and can be opened as a folder with e.g. 7-zip by right-clicking and choosing 'open archive', and used after extracting (unzipping). The data files are stored in .nc (NetCDF) format, which can be viewed using Panoply , or packages in Python or R . The output data from simulations are stored in the same format. The input data .tar file contains three folders: (1) 'shared' domain files with gridcell longitude, latitude, and area; (2) land (=lnd) surface data, and (3) atmosphere (=atm) data. The input data are site -specific.","title":"Input data"},{"location":"#atmospheric-forcing","text":"Atmospheric forcing data drives the modelled climate using a time series of climatic variables. Downloadable data products exist, but is often on too coarse scales for realistic single-point simulations. Here is a list of atmospheric forcing variables used in CLM: Incident solar radiation (FSDS), W/m2 Temperature at the lowest atmospheric level (TBOT), degrees K (or can be C) Precipitation (PRECTmms), mm/s Wind speed at the lowest atmospheric level (WIND), m/s Forcing data for our sites are stored with the rest of the input data . Here are some exaples of what the input data .tar contains: CAM/chem/trop_mozart_aero/aero/ aerosol deposition: dust, black carbon, organic carbon datm7 GSWP3v1: monthly atmospheric forcing from the GSWP3 data product. The climatic variables in the above list are stored in these files. NASA_LIS: lightning frequency topo_forcing: topography height If you have your own data, you can replace the default input files with your own. under construction: Instruction for how to do this . Make sure the format and units are the exact same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation","title":"Atmospheric forcing"},{"location":"#surface-data","text":"Surface data contains information the model needs about the land surface, such as land use trajectories, soil properties, vegetation parameters, and albedo . Here are some exaples of what the input data .tar contains: 'firedata' population density 'paramdata' CLM5 parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allocation of carbon, photosynthetic pathway FATES parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allometry, carbon pools, nitrogen uptake, mortality, recruitment, fuel load for fire module 'snicardata' snow \"growth\" parameters snow \"optics\" 'surfdata_map' surface data: soil depth & other properties, albedo & thermal conductance of different surface types, and fraction of gridcell covered by vegetation, land, & other land cover types 'urbandata' urban classes, building interior temperature Note that when CLM is running without FATES, a simpler 'big-leaf'-version of vegetation is used instead. The CLM5 and FATES parameters thus overlap to some degree, with FATES replacing some and adding other parameters when activated. For the Vestland climate grid sites , surface data has been created from raw data sets, using this script . There are publicly available data products that could be downloaded and extracted for the nearest model gridcell, given points coordinates, that contain all the necessary surface data. We have not used this; our surface data is interpolated from raw data sets of better resolution. This data should be more accurate than the alternative data products. If you have your own data, you can replace the default input files with your own. under construction: Instruction for how to do this . Make sure the format and units are the same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation","title":"Surface data"},{"location":"#spin-up","text":"To get realistic simulations, the model needs to run for a while to reach a state of equilibrium under the applied forcing. Starting the model from \"bare ground\", the climate is not in equilibrium, there is no or only unrealistic soil, and the model needs time to grow and kill vegetation to get appropriate soil properties and a stable climate. We provide \"restart\" files for our sites with the following spin-up phase settings: under construction","title":"Spin-up"},{"location":"#running-simulations","text":"To run simulations, see the user guide . To run a simulation, you need to set up a case which tells the model how to run. A case can be run several times, or stopped and started again. The NorESM platform provides a settings file that will set some basic information, and scripts to simplify running the case(s). Under NorESM_LandSites_Platform/landsites_tools/simulation/ there are python scripts make_cases.py and run_cases.py . These scripts set up a simulation case directory and creates, builds and downloads input data for the model. For more detailed information on what goes on in CLM and its coupler (which connects CLM to other model components), see this CIME user guide , but note that the NorESM modelling platform uses these commands and scripts more indirectly. The settings file and python scripts combine several of these options and commands to simplify the process of running simulations.","title":"Running simulations"},{"location":"#settings-file","text":"Users can customise model settings with a settings file created through the container -- see the user guide . All required information to prepare and run CLM-FATES cases for the available Norwegian land sites is provided via a settings.txt file. A template, which also serves as the default settings if no changes are made, is stored under ~/NorESM_LandSites_Platform/landsites_tools/ . The settings file has the following contents: setting description dir_cases cases root folder, absolute or relative to project dir dir_clm_input clm input root folder, absolute or relative to project dir dir_output output root folder, absolute or relative to project dir start_time at what time should simulation start? Format yyyy-mm-dd hh:mm, default 2000-01-01 end_time at what time should simulation stop? Format yyyy-mm-dd, default 2001-01-01 sites2run which sites should be simulated? Make sure the names are correct! Fetches from data/.dicts/sites.json. Default is ALP1 and ALP2 type_run What type of model run do you want? startup, hybrid, branch, restart. Default is startup type_model CLM-SP, CLM-BGC, CLM-FATES, FATES-SP, FATES-nocomp, FATES-hydro. Default is CLM-SP initial_file initial conditions (empty: cold start) frequency_output At what frequency should output be stored? Monthly/daily/hourly. Default is monthly, which gives all variables variables_output which output variables to store. CLM has many more to choose from variables_plot Which variables to plot frequency_plot Timestep of plotting. Default daily. vegetation_types_FATES to be implemented output_groups to be implemented The last lines (not shown here) also specify some paths that users should not touch. Running the make_cases script will fill those in automatically. If you are changing the settings file manually, be careful with formatting! Upper/lowercase, spaces and symbols need to be correct for it to work.","title":"Settings file"},{"location":"#model-run-types","text":"model run type description startup a 'cold' start from bare ground. The vegetation and climate is not in equilibrium and the model will not produce realistic output. No spin-up is included. Use this mode for quick testing, or for making your own spin-up. hybrid the model is initialized similar to a startup run, but uses initialization datasets from a previous case. Suitable when you already have good spin-up files and want a more realistic simulation. branch the model is initialized using a consistent set of restart files from a previous run. The case name is generally changed for a branch run, although it does not have to be. Branch runs are suitable for sensitivity or parameter studies, or when settings for history file output streams need to be modified while still maintaining bit-for-bit reproducibility. restart continues running an existing case after it has been stopped.","title":"model run types"},{"location":"#model-types","text":"This setting is where users can change the model component set . \ud83d\udea7 Currently, only the CLM-FATES option works and the rest are placeholders for future developments. model run type description under construction CLM-SP satellite phenology. CLM-BCG biogeochemistry CLM-FATES FATES vegetation FATES-SP FATES but with satellite phenology FATES-nocomp FATES without competition FATES-hydro FATES with different hydrology","title":"model types \ud83d\udea7"},{"location":"#make_casespy","text":"This python script creates, builds, and sets up CTSM cases for predefined or custom site locations . It is either using the simulation options specified in a 'settings.txt' file or asks for interactive command line input to create one. Input data is automatically downloaded unless custom input data has been added. When making a new case, it first creates a case directory containing the scripts and XML files to configure a case. Then, it creates scripts needed to run the model along with namelist files . Finally, it compiles the model and builds the executable file from which the case is run. The make_cases.py script uses helper scripts stored in the utils/ folder and commands experienced CLM users will be familiar with, namely create_newcase , case.setup and case.build .","title":"make_cases.py"},{"location":"#run_casespy","text":"This python script runs previously built cases made with make_cases.py . The respective paths need to be defined in a 'settings.txt' file. The model output files will be created in the data/output/CASE_NAME directory by default, but a different path can be specified. Depending on the length of simulation, and computational resources available, this can take some time. The script calls on the case.submit command that experienced CLM users will be familiar with.","title":"run_cases.py"},{"location":"#postprocess","text":"","title":"Postprocess"},{"location":"#output-files","text":"Output is stored in .nc (NetCDF) format, which can be viewed using Panoply, or packages in Python or R","title":"output files"},{"location":"#history-variables","text":"Each output .nc file contains information for several history variables, such as ... under construction","title":"history variables"},{"location":"#plotting","text":"Suggestions for plotting output are given in a Jupyter notebook in the repository under the /notebooks directory. In future versions, we hope to add more postprocessing and plotting functionality.","title":"plotting"},{"location":"#versions","text":"Platform versions follow standard numbering, and releases below 1 should be considered unstable and preliminary.","title":"Versions"},{"location":"#list-of-versions-newest-on-top","text":"release ... tag 0.1.0-dev","title":"List of versions (newest on top):"},{"location":"about/","text":"Platform for NorESM site-level simulation over land doi: under construction Overview and documentation The platform aims to facilitate site-level simulations over land using NorESM and its land component CTSM with the developing vegetation demographic module FATES . It provides optimized model setup, input data and reproducible workflows for running the model and analyzing model output over sites with meteorological, ecological and hydrological observations with minimal techincal obstacles. The platform aims to bridge the gaps between observations and modelling, and promote the usage of site-level observations to test, validate and improve NorESM and its land component on the one hand, and promote the usage of NorESM and its land model component by non-modellers on the other hand. The observation sites currently included in the platform are described in the Land sites section. Code development team Hui Tang Lasse Torben Keetz Stefanie Falk Emiliano Gelati Elin Aas Anne Fouilloux Yeliz Yilmaz Eva Lieungh Peter Horvath Kjetil Aas Sunniva Indrehus Devaraju Narayanappa Data contributors Sonya Geange Inge Althuizen Supporting projects EMERALD LATICE SeedClim LandPress THREE-D INES EOSC-Nordic How to cite Acknowledgement Contact For questions about the platform, please open an issue on GitHub or get in touch with one of the code developers directly.","title":"About"},{"location":"about/#platform-for-noresm-site-level-simulation-over-land","text":"doi: under construction","title":"Platform for NorESM site-level simulation over land"},{"location":"about/#overview-and-documentation","text":"The platform aims to facilitate site-level simulations over land using NorESM and its land component CTSM with the developing vegetation demographic module FATES . It provides optimized model setup, input data and reproducible workflows for running the model and analyzing model output over sites with meteorological, ecological and hydrological observations with minimal techincal obstacles. The platform aims to bridge the gaps between observations and modelling, and promote the usage of site-level observations to test, validate and improve NorESM and its land component on the one hand, and promote the usage of NorESM and its land model component by non-modellers on the other hand. The observation sites currently included in the platform are described in the Land sites section.","title":"Overview and documentation"},{"location":"about/#code-development-team","text":"Hui Tang Lasse Torben Keetz Stefanie Falk Emiliano Gelati Elin Aas Anne Fouilloux Yeliz Yilmaz Eva Lieungh Peter Horvath Kjetil Aas Sunniva Indrehus Devaraju Narayanappa","title":"Code development team"},{"location":"about/#data-contributors","text":"Sonya Geange Inge Althuizen","title":"Data contributors"},{"location":"about/#supporting-projects","text":"EMERALD LATICE SeedClim LandPress THREE-D INES EOSC-Nordic","title":"Supporting projects"},{"location":"about/#how-to-cite","text":"","title":"How to cite"},{"location":"about/#acknowledgement","text":"","title":"Acknowledgement"},{"location":"about/#contact","text":"For questions about the platform, please open an issue on GitHub or get in touch with one of the code developers directly.","title":"Contact"},{"location":"contributing/","text":"How to contribute to the NorESM land sites platform The NorESM land sites platform is developed by a group of students, postdocs, and software engineers when we have the time or need certain functionalities. We welcome anyone to join us in developing new functionalities, using the platform, add to the documentation, and contribute to making this platform a dynamic and useful research and teaching tool. If you have questions, comments, or suggestions for improvements, please open an issue in the repository. Any contributions and involvement in our community must be in line with our Code of conduct . How to contribute to the code We use our GitHub repository for developing code. If you are new to working with Git and GitHub, you might like this or this tutorial. The current version of the platform is kept in the main branch of the repository, and further development happens on the platform_dev branch. If you are developing code, please fork the repository and make your changes there before creating a pull request to the platform_dev branch when changes are complete. Testing can be done on different machines, such as an image on NREC, or using Saga, Fram, or even a local computer. If your work touches the Docker container, see instructions in this readme file . If you have questions or comments about the platform, please open an issue issue in the repository. How to contribute to the documentation This documentation page is built using GitHub pages and MkDocs . To edit this documentation page, go to the main branch of the github repository , and navigate to the docs/ folder. To edit the main documentation page, open the index.md file and make your changes, using Markdown syntax. Then commit (save changes) and start a pull request (to enter your changes into the repository -- must be approved by an admin). The same procedure can be used for this Contributing section from the contributing.md file, and so on. Code of conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Scientific Use and Publication Ethics We aim to create an open development environment where scientists can be confident that all members of the community are conducting research in an ethical manner. In particular, writing scientific code is a form of intellectual contribution, and one should expect that all such intellectual contributions are respected and given credit in any resulting published scientific work. To support the community and avoid issues of scientific misconduct related to the above principle, please respect the following rules: Document the version of the platform and models used in any publication, preferably by using a release tag (existing or newly created) if possible, or a commit hash if not. Do not use code without checking the license or discussing with the author(s) your intentions for using the code and receiving their permission to do so. When using model features that have recently been integrated into this or the central NorESM/CLM/FATES development repositories, be mindful of the contributions of others and, where the novel features qualitatively affect the results of a given simulation, involve the author(s) of these features in any resulting manuscripts. Be particularly aware of the concerns of early career researchers, and ensure they have sufficient opportunities to lead publications using their developments. When discussing results arising from older model features that have been described in the literature, accurately cite the publications describing those features or releases. Enforcement Responsibilities Community leaders should clarify and enforce our standards of acceptable behavior and take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Enforcement All community leaders are obligated to respect the privacy and security of the reporter of any incident. Consequences for any action deemed to violate this Code of Conduct, enforced by community leaders, may be: Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 2.1 , and the FATES Code of Conduct . To edit this documentation page, go to the main branch of the github repository , and navigate to the docs/ folder. To edit the main documentation page, open the index.md file and make your changes, using Markdown syntax. Then commit (save changes) and start a pull request (to enter your changes into the repository -- must be approved by an admin). The same procedure can be used for this Contributing section from the contributing.md file. NB! The About section is mirrored from the main repository README.md file, and should not be touched from the docs/ folder. To make changes, edit the README file in the repository!","title":"Contributing & code of conduct"},{"location":"contributing/#how-to-contribute-to-the-noresm-land-sites-platform","text":"The NorESM land sites platform is developed by a group of students, postdocs, and software engineers when we have the time or need certain functionalities. We welcome anyone to join us in developing new functionalities, using the platform, add to the documentation, and contribute to making this platform a dynamic and useful research and teaching tool. If you have questions, comments, or suggestions for improvements, please open an issue in the repository. Any contributions and involvement in our community must be in line with our Code of conduct .","title":"How to contribute to the NorESM land sites platform"},{"location":"contributing/#how-to-contribute-to-the-code","text":"We use our GitHub repository for developing code. If you are new to working with Git and GitHub, you might like this or this tutorial. The current version of the platform is kept in the main branch of the repository, and further development happens on the platform_dev branch. If you are developing code, please fork the repository and make your changes there before creating a pull request to the platform_dev branch when changes are complete. Testing can be done on different machines, such as an image on NREC, or using Saga, Fram, or even a local computer. If your work touches the Docker container, see instructions in this readme file . If you have questions or comments about the platform, please open an issue issue in the repository.","title":"How to contribute to the code"},{"location":"contributing/#how-to-contribute-to-the-documentation","text":"This documentation page is built using GitHub pages and MkDocs . To edit this documentation page, go to the main branch of the github repository , and navigate to the docs/ folder. To edit the main documentation page, open the index.md file and make your changes, using Markdown syntax. Then commit (save changes) and start a pull request (to enter your changes into the repository -- must be approved by an admin). The same procedure can be used for this Contributing section from the contributing.md file, and so on.","title":"How to contribute to the documentation"},{"location":"contributing/#code-of-conduct","text":"","title":"Code of conduct"},{"location":"contributing/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"contributing/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"contributing/#scientific-use-and-publication-ethics","text":"We aim to create an open development environment where scientists can be confident that all members of the community are conducting research in an ethical manner. In particular, writing scientific code is a form of intellectual contribution, and one should expect that all such intellectual contributions are respected and given credit in any resulting published scientific work. To support the community and avoid issues of scientific misconduct related to the above principle, please respect the following rules: Document the version of the platform and models used in any publication, preferably by using a release tag (existing or newly created) if possible, or a commit hash if not. Do not use code without checking the license or discussing with the author(s) your intentions for using the code and receiving their permission to do so. When using model features that have recently been integrated into this or the central NorESM/CLM/FATES development repositories, be mindful of the contributions of others and, where the novel features qualitatively affect the results of a given simulation, involve the author(s) of these features in any resulting manuscripts. Be particularly aware of the concerns of early career researchers, and ensure they have sufficient opportunities to lead publications using their developments. When discussing results arising from older model features that have been described in the literature, accurately cite the publications describing those features or releases.","title":"Scientific Use and Publication Ethics"},{"location":"contributing/#enforcement-responsibilities","text":"Community leaders should clarify and enforce our standards of acceptable behavior and take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"contributing/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces.","title":"Scope"},{"location":"contributing/#enforcement","text":"All community leaders are obligated to respect the privacy and security of the reporter of any incident. Consequences for any action deemed to violate this Code of Conduct, enforced by community leaders, may be: Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community.","title":"Enforcement"},{"location":"contributing/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant, version 2.1 , and the FATES Code of Conduct . To edit this documentation page, go to the main branch of the github repository , and navigate to the docs/ folder. To edit the main documentation page, open the index.md file and make your changes, using Markdown syntax. Then commit (save changes) and start a pull request (to enter your changes into the repository -- must be approved by an admin). The same procedure can be used for this Contributing section from the contributing.md file. NB! The About section is mirrored from the main repository README.md file, and should not be touched from the docs/ folder. To make changes, edit the README file in the repository!","title":"Attribution"},{"location":"docker/","text":"Docker setup Prerequisites Install Docker for your operating system. Run docker pull lassetk/noresm_land_sites_platform:latest to pull the image to your local storage. -- Linux: need to use sudo or change permission -- The image will be kept in a default location depending on your system. git clone NorESM_LandSites_Platform to local computer Setup the container All the setup we need for running the container are in docker-compose.yml . Feel free so edit memory and CPU constrains depending on your available resources. File mapping between the container and the host is defined in the volumes: block. By default, only data directory of local 'NorESM_LandSites_Platform' folder is mapped. Run To run the container, first be sure you are in the main directory containing docker-compose.yml . Then run following command docker-compose up Once the process is running you can access make_settings app at localhost:5006 and jupyter notebook environment is accessible at localhost:8888 with password: pass To stop the container running press Ctrl+c Build the container Once you'd like to test new changes to the setup, you'll need to rebuild the container. This should ideally be done on a remote computer, like NREC, and not on a laptop (especially if you are using Windows!). To rebuild the container, ensure you are in the root directory of the repository and run: docker build . -t <TAG>:<VERSION> Replace \\<TAG> with your repository name on DockerHub Replace \\<VERSION> with any string that you'd like to distinguish your version. By convention latest is used to specify latest working version. After the build process is finished, you should push the new image to the repository. Firstly ensure you are logged in by: docker login Consequently push the image: docker push <TAG>:<VERSION>","title":"Docker setup"},{"location":"docker/#docker-setup","text":"","title":"Docker setup"},{"location":"docker/#prerequisites","text":"Install Docker for your operating system. Run docker pull lassetk/noresm_land_sites_platform:latest to pull the image to your local storage. -- Linux: need to use sudo or change permission -- The image will be kept in a default location depending on your system. git clone NorESM_LandSites_Platform to local computer","title":"Prerequisites"},{"location":"docker/#setup-the-container","text":"All the setup we need for running the container are in docker-compose.yml . Feel free so edit memory and CPU constrains depending on your available resources. File mapping between the container and the host is defined in the volumes: block. By default, only data directory of local 'NorESM_LandSites_Platform' folder is mapped.","title":"Setup the container"},{"location":"docker/#run","text":"To run the container, first be sure you are in the main directory containing docker-compose.yml . Then run following command docker-compose up Once the process is running you can access make_settings app at localhost:5006 and jupyter notebook environment is accessible at localhost:8888 with password: pass To stop the container running press Ctrl+c","title":"Run"},{"location":"docker/#build-the-container","text":"Once you'd like to test new changes to the setup, you'll need to rebuild the container. This should ideally be done on a remote computer, like NREC, and not on a laptop (especially if you are using Windows!). To rebuild the container, ensure you are in the root directory of the repository and run: docker build . -t <TAG>:<VERSION> Replace \\<TAG> with your repository name on DockerHub Replace \\<VERSION> with any string that you'd like to distinguish your version. By convention latest is used to specify latest working version. After the build process is finished, you should push the new image to the repository. Firstly ensure you are logged in by: docker login Consequently push the image: docker push <TAG>:<VERSION>","title":"Build the container"},{"location":"land-sites/","text":"NorESM land sites This page will contain descriptions, meta data, and relevant reference hyperlinks for the included land sites. Overview We currently support 18 sites: 12 Vestland climate grid sites and 6 climate station sites of interest to the LATICE group. These are locations where there are climate stations and ecological field experiments that make these sites of particular interest. To plot site locations over a background map in R, you can also look at this repo Vestland climate grid (SeedClim) sites Site name Lon (X) Lat (Y) Elevation (Z) ALP1 8.12343 61.0243 1208 ALP2 7.27596 60.8231 1097 ALP3 7.17561 60.8328 1213 ALP4 6.41504 60.9335 1088 SUB1 8.70466 60.8203 815 SUB2 7.17666 60.8760 700 SUB3 6.63028 61.0866 769 SUB4 6.51468 60.5445 797 BOR1 9.07876 61.0355 589 BOR2 7.16982 60.8803 474 BOR3 6.33738 60.6652 431 BOR4 5.96487 60.6901 346 The Vestland climate grid, often called the SeedClim grid after the first major project that set it up, is a set of calcareous grassland sites across gradients of precipitation and temperature. The sites have been, and still are, host to many ecological reseach projects that study vegetation dynamics, plant interactions, functional traits and climate responses. Each site also has loggers for temperature and other climatic variables: ... Illustration from the SeedClim project: In the first project, turf squares (top soil, roots and whole plants) were cut out and physically transplanted to other sites, as indicated by the arrows in the top left corner. The vegetation in these turfs was carefully monitored over several years in their new locations, to see how and how quickly the plants adapted to a new environment. Selected papers using the sites: coming soon LATICE-MIP sites \ud83d\udea7 NB! These coordinates are approximate and might change soon. Site/station name Lon (X) Lat (Y) Elevation (Z) finseflux 7.527008533 60.59383774 1210 hisaasen_upper 12.25481033 61.10516357 680 hisaasen_lower 12.25089836 61.1115036 640 iskoras 25.29547425 69.3408715 360 aas 10.781667 59.660278 93.2 hurdal 11.078142 60.372387 NA","title":"NorESM land sites"},{"location":"land-sites/#noresm-land-sites","text":"This page will contain descriptions, meta data, and relevant reference hyperlinks for the included land sites.","title":"NorESM land sites"},{"location":"land-sites/#overview","text":"We currently support 18 sites: 12 Vestland climate grid sites and 6 climate station sites of interest to the LATICE group. These are locations where there are climate stations and ecological field experiments that make these sites of particular interest. To plot site locations over a background map in R, you can also look at this repo","title":"Overview"},{"location":"land-sites/#vestland-climate-grid-seedclim-sites","text":"Site name Lon (X) Lat (Y) Elevation (Z) ALP1 8.12343 61.0243 1208 ALP2 7.27596 60.8231 1097 ALP3 7.17561 60.8328 1213 ALP4 6.41504 60.9335 1088 SUB1 8.70466 60.8203 815 SUB2 7.17666 60.8760 700 SUB3 6.63028 61.0866 769 SUB4 6.51468 60.5445 797 BOR1 9.07876 61.0355 589 BOR2 7.16982 60.8803 474 BOR3 6.33738 60.6652 431 BOR4 5.96487 60.6901 346 The Vestland climate grid, often called the SeedClim grid after the first major project that set it up, is a set of calcareous grassland sites across gradients of precipitation and temperature. The sites have been, and still are, host to many ecological reseach projects that study vegetation dynamics, plant interactions, functional traits and climate responses. Each site also has loggers for temperature and other climatic variables: ... Illustration from the SeedClim project: In the first project, turf squares (top soil, roots and whole plants) were cut out and physically transplanted to other sites, as indicated by the arrows in the top left corner. The vegetation in these turfs was carefully monitored over several years in their new locations, to see how and how quickly the plants adapted to a new environment. Selected papers using the sites: coming soon","title":"Vestland climate grid (SeedClim) sites"},{"location":"land-sites/#latice-mip-sites-nb-these-coordinates-are-approximate-and-might-change-soon","text":"Site/station name Lon (X) Lat (Y) Elevation (Z) finseflux 7.527008533 60.59383774 1210 hisaasen_upper 12.25481033 61.10516357 680 hisaasen_lower 12.25089836 61.1115036 640 iskoras 25.29547425 69.3408715 360 aas 10.781667 59.660278 93.2 hurdal 11.078142 60.372387 NA","title":"LATICE-MIP sites \ud83d\udea7 NB! These coordinates are approximate and might change soon."},{"location":"user_guide/","text":"User guide \ud83d\udea7 under construction - please help us by reporting errors and questions on our issues page This is the user guide for running point simulations with the NorESM LandSites Platform \ud83c\udf0d You will need to open two new windows in the process, so it's a good idea to use two screens or to make this window narrower so you can see both the user guide and another window next to it. TL;DR quick start \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfc3\u200d\u2642\ufe0f go to repository and start the Docker container: $ cd NorESM_LandSites_platform $ docker-compose up go to container GUI: localhost:8080 and push buttons access jypyter notebooks on localhost:8888 \ud83c\udf89 Step by step guide for using the platform 0. Prerequisites (first time setup) \ud83c\udf31 To use the NorESM LandSites Platform, you need to install Git (and make a user account) and Docker desktop before you can clone the repository (= download platform scripts) and start working with the Docker container. If you don't want to make a GitHub account, you may try to download and unpack the repository manually instead with the code button and \u00b4download zip\u00b4. Open file explorer and find a suitable folder to serve as working directory. This is where you will store the repository and installation files needed by the platform, as well as your output files (which may take up quite a bit of space!). Your working directory should be somewhere on your C: drive, for instance C:/Users/yourusername . When you are in your chosen working directory, right-click and choose \"Git Bash here\". In the terminal that pops up, paste in the following line by right-clicking: $ git clone https://github.com/NorESMhub/NorESM_LandSites_Platform.git This will download (= clone) the repository (= folder structure and files) to your working directory. You can now see the folder and files in your file explorer. Most of the files can be opened in a text editor like Notepad if you want to look at their contents. Once Git, Docker desktop and the repository are in place, you don't have to do this again. If the platform has been updated the next time you want to use it, you might want to download the updates by typing git pull into Git Bash from your local clone of the repository. 1. Start the container \ud83e\uddf0 In the working directory where you have cloned the repository, open a terminal by right-clicking and choosing \"Git Bash here\" (or use the one you already have open if you just did the first time setup). Make sure you are in the folder containing the docker-compose.yml file (type ls and hit enter to list the files in the current folder; if you see NorESM_LandSites_Platform, you need to change directory by typing \u00b4cd NorESM_LandSites_Platform\u00b4). Then write this command and hit enter to get the container up and running: $ docker-compose up The first time you execute this, a lot of files will be downloaded. When the container is up and running, you will get the following address to access the container through your browser: localhost:8080 2. Inside GUI: Set simulation settings \u2699\ufe0f You should now be looking at the graphical user interface (=GUI, at localhost:8080 ) for setting up and running simulations. This interface has access to the Docker container you started in step 1. (If you are doing a quick test with default platform settings , just pick a site and click \u00b4create case\u00b4 and then \u00b4run\u00b4.) 2.1 Download site data button The \u00b4download site data\u00b4 button gives you the input data for your selected site. We provide a notebook called \u00b4input_visualization.ipynb\u00b4 which you can open in Jupyterlab on localhost:8888 to explore some of the data that goes in to a simulation. This is a good thing to do while your case is running (which might take some time). 2.2 Create case button With the \u00b4create case\u00b4 button, you can look at and edit some model settings and parameters as you create a new case. This is not an exhaustive list of possible changes (by far), but give you easy access to some options. All the boxes have default values for a quick but not especially realistic simulation. The box that pops up with settings has four tabs: CTSM (=Community Terrestrial Systems Model) settings for general options like simulation period CLM / Namelist settings where you can change CO2 concentration, switch some modules of/off. CLM / Namelist / history settings where advanced users can set how and when the simulation output is stored. FATES parameters where you can disable some Plant Functional Types (PFTs) and change some vegetation parameters. Once you have created your case with the desired settings, it will appear in a list of cases with the case ID, status, creation date, grid information, component set, a link to view the settings you specified, and some buttons with more options. Pay attention to the Status, which will transition from pending to ready when the case has been built. 3. Run your simulations \ud83d\udc69\u200d\ud83d\udcbb Once the case is ready, you can start the simulation with \u00b4run\u00b4. There is a button to \u00b4download\u00b4 the output when the run is finished, and to \u00b4edit\u00b4 the settings and create a new case, or \u00b4delete\u00b4 the case. Depending of how long you asked the model to run for (default is 1 year), and your hardware, the simulation can take some time \u23f3. On a regular laptop, one year of simulation of a single site (= gridcell) might take ~5-20 minutes. Make sure your computer is not running other heavy programs simultaneously (like GIS, Photoshop or 1000 open browser tabs \ud83d\udc40). The Docker container you started in step 1 is performing the simulation using your local computer. Advanced users may also use the container on an HPC cluster to speed up long simulations. While you wait for the simulation to finish, you may like to inspect the model input data more closely. Open a new browser tab and go to the Docker container at localhost:8888 . Navigate to the \u00b4notebooks\u00b4 folder and open the \u00b4input_visualization.ipynb\u00b4 notebook. It will guide you through some of the input data for the model. Soon your simulations will be finished! \ud83c\udf89 If you got an error message somewhere along the way, please head over to our GitHub and write an issue describing what happened, what machine you are on (mac/windows/HPC etc.), and copy in the error message and any other relevant information. Output will be stored at time intervals you set (default is monthly), and can be downloaded from the container with the \u00b4download\u00b4 button or viewed in the data/output folder in the container. 4. Look at your output \ud83d\udcc8 Output is stored in the data/output folder in the container, accessed on localhost:8888 . Nagivate to the \u00b4notebooks\u00b4 folder and open the \u00b4output_visualization.ipynb\u00b4 notebook. It guides you through some ways of looking at the model output, though there are many other ways to do this and much more model output available! Output files can alternatively be opened in Panoply, R, or using python on your local computer. 5. Close the container NB! The container will continue to run unless you stop it. When you are finished with simulations and output processing and downloading things you might need offline, go back to your Git Bash terminal and press \u00b4Ctrl+c\u00b4. \ud83c\udf32 ____ \ud83c\udf33 ____ \ud83c\udf32 ____ \ud83c\udf33 ____ \ud83c\udf32 ____ \ud83c\udf33 ____ \ud83c\udf32 ____ \ud83c\udf33 ____ \ud83c\udf32","title":"User guide"},{"location":"user_guide/#user-guide","text":"\ud83d\udea7 under construction - please help us by reporting errors and questions on our issues page This is the user guide for running point simulations with the NorESM LandSites Platform \ud83c\udf0d You will need to open two new windows in the process, so it's a good idea to use two screens or to make this window narrower so you can see both the user guide and another window next to it.","title":"User guide"},{"location":"user_guide/#tldr-quick-start","text":"go to repository and start the Docker container: $ cd NorESM_LandSites_platform $ docker-compose up go to container GUI: localhost:8080 and push buttons access jypyter notebooks on localhost:8888 \ud83c\udf89","title":"TL;DR quick start \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfc3\u200d\u2642\ufe0f"},{"location":"user_guide/#step-by-step-guide-for-using-the-platform","text":"","title":"Step by step guide for using the platform"},{"location":"user_guide/#0-prerequisites-first-time-setup","text":"To use the NorESM LandSites Platform, you need to install Git (and make a user account) and Docker desktop before you can clone the repository (= download platform scripts) and start working with the Docker container. If you don't want to make a GitHub account, you may try to download and unpack the repository manually instead with the code button and \u00b4download zip\u00b4. Open file explorer and find a suitable folder to serve as working directory. This is where you will store the repository and installation files needed by the platform, as well as your output files (which may take up quite a bit of space!). Your working directory should be somewhere on your C: drive, for instance C:/Users/yourusername . When you are in your chosen working directory, right-click and choose \"Git Bash here\". In the terminal that pops up, paste in the following line by right-clicking: $ git clone https://github.com/NorESMhub/NorESM_LandSites_Platform.git This will download (= clone) the repository (= folder structure and files) to your working directory. You can now see the folder and files in your file explorer. Most of the files can be opened in a text editor like Notepad if you want to look at their contents. Once Git, Docker desktop and the repository are in place, you don't have to do this again. If the platform has been updated the next time you want to use it, you might want to download the updates by typing git pull into Git Bash from your local clone of the repository.","title":"0. Prerequisites (first time setup) \ud83c\udf31"},{"location":"user_guide/#1-start-the-container","text":"In the working directory where you have cloned the repository, open a terminal by right-clicking and choosing \"Git Bash here\" (or use the one you already have open if you just did the first time setup). Make sure you are in the folder containing the docker-compose.yml file (type ls and hit enter to list the files in the current folder; if you see NorESM_LandSites_Platform, you need to change directory by typing \u00b4cd NorESM_LandSites_Platform\u00b4). Then write this command and hit enter to get the container up and running: $ docker-compose up The first time you execute this, a lot of files will be downloaded. When the container is up and running, you will get the following address to access the container through your browser: localhost:8080","title":"1. Start the container \ud83e\uddf0"},{"location":"user_guide/#2-inside-gui-set-simulation-settings","text":"You should now be looking at the graphical user interface (=GUI, at localhost:8080 ) for setting up and running simulations. This interface has access to the Docker container you started in step 1. (If you are doing a quick test with default platform settings , just pick a site and click \u00b4create case\u00b4 and then \u00b4run\u00b4.)","title":"2. Inside GUI: Set simulation settings \u2699\ufe0f"},{"location":"user_guide/#21-download-site-data-button","text":"The \u00b4download site data\u00b4 button gives you the input data for your selected site. We provide a notebook called \u00b4input_visualization.ipynb\u00b4 which you can open in Jupyterlab on localhost:8888 to explore some of the data that goes in to a simulation. This is a good thing to do while your case is running (which might take some time).","title":"2.1 Download site data button"},{"location":"user_guide/#22-create-case-button","text":"With the \u00b4create case\u00b4 button, you can look at and edit some model settings and parameters as you create a new case. This is not an exhaustive list of possible changes (by far), but give you easy access to some options. All the boxes have default values for a quick but not especially realistic simulation. The box that pops up with settings has four tabs: CTSM (=Community Terrestrial Systems Model) settings for general options like simulation period CLM / Namelist settings where you can change CO2 concentration, switch some modules of/off. CLM / Namelist / history settings where advanced users can set how and when the simulation output is stored. FATES parameters where you can disable some Plant Functional Types (PFTs) and change some vegetation parameters. Once you have created your case with the desired settings, it will appear in a list of cases with the case ID, status, creation date, grid information, component set, a link to view the settings you specified, and some buttons with more options. Pay attention to the Status, which will transition from pending to ready when the case has been built.","title":"2.2 Create case button"},{"location":"user_guide/#3-run-your-simulations","text":"Once the case is ready, you can start the simulation with \u00b4run\u00b4. There is a button to \u00b4download\u00b4 the output when the run is finished, and to \u00b4edit\u00b4 the settings and create a new case, or \u00b4delete\u00b4 the case. Depending of how long you asked the model to run for (default is 1 year), and your hardware, the simulation can take some time \u23f3. On a regular laptop, one year of simulation of a single site (= gridcell) might take ~5-20 minutes. Make sure your computer is not running other heavy programs simultaneously (like GIS, Photoshop or 1000 open browser tabs \ud83d\udc40). The Docker container you started in step 1 is performing the simulation using your local computer. Advanced users may also use the container on an HPC cluster to speed up long simulations. While you wait for the simulation to finish, you may like to inspect the model input data more closely. Open a new browser tab and go to the Docker container at localhost:8888 . Navigate to the \u00b4notebooks\u00b4 folder and open the \u00b4input_visualization.ipynb\u00b4 notebook. It will guide you through some of the input data for the model. Soon your simulations will be finished! \ud83c\udf89 If you got an error message somewhere along the way, please head over to our GitHub and write an issue describing what happened, what machine you are on (mac/windows/HPC etc.), and copy in the error message and any other relevant information. Output will be stored at time intervals you set (default is monthly), and can be downloaded from the container with the \u00b4download\u00b4 button or viewed in the data/output folder in the container.","title":"3. Run your simulations \ud83d\udc69\u200d\ud83d\udcbb"},{"location":"user_guide/#4-look-at-your-output","text":"Output is stored in the data/output folder in the container, accessed on localhost:8888 . Nagivate to the \u00b4notebooks\u00b4 folder and open the \u00b4output_visualization.ipynb\u00b4 notebook. It guides you through some ways of looking at the model output, though there are many other ways to do this and much more model output available! Output files can alternatively be opened in Panoply, R, or using python on your local computer.","title":"4. Look at your output \ud83d\udcc8"},{"location":"user_guide/#5-close-the-container","text":"NB! The container will continue to run unless you stop it. When you are finished with simulations and output processing and downloading things you might need offline, go back to your Git Bash terminal and press \u00b4Ctrl+c\u00b4. \ud83c\udf32 ____ \ud83c\udf33 ____ \ud83c\udf32 ____ \ud83c\udf33 ____ \ud83c\udf32 ____ \ud83c\udf33 ____ \ud83c\udf32 ____ \ud83c\udf33 ____ \ud83c\udf32","title":"5. Close the container"}]}